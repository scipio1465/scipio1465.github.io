{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hq41XXPJd76B"
   },
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1632170550203,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "a-8CCr_z-4cZ",
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 62653,
     "status": "ok",
     "timestamp": 1632170612852,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "074EhX-s_PHy",
    "outputId": "d59e33d3-5229-4db3-8cdc-618a9be22d07"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive\n"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount(\"/content/drive\")\n",
    "## now the authentication is required.  It will require username and passwd, so you can use a different account\n",
    "##  4/1AX4XfWjdcQKolL3mXr_ejyAko40f4i2heA10soH6ZNL_1nJN64sxbpJEdGc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 656,
     "status": "ok",
     "timestamp": 1632170615711,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Sj-FYpcvBipS",
    "outputId": "30d01934-17c6-4b04-c030-07f14efb85a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 92\n",
      "-rw------- 1 root root  5075 Aug  4 18:40 proust01.txt\n",
      "-rw------- 1 root root  3358 Aug  5 09:56 proust02.txt\n",
      "-rw------- 1 root root  4238 Aug  5 11:14 proust03.txt\n",
      "-rw------- 1 root root  5380 Aug  5 12:52 proust04.txt\n",
      "-rw------- 1 root root  2704 Aug  5 13:52 proust05.csv\n",
      "-rw------- 1 root root  2816 Aug  5 12:54 proust05p.txt\n",
      "-rw------- 1 root root   896 Aug  5 13:46 proust06e.csv\n",
      "-rw------- 1 root root  1006 Aug  5 13:02 proust06e.txt\n",
      "-rw------- 1 root root  1431 Aug 31 20:01 proust07.csv\n",
      "-rw------- 1 root root  1419 Aug 31 20:00 proust7p_tmp.txt\n",
      "-rw------- 1 root root   404 Aug 31 20:09 proust_meta_uptovol6.csv\n",
      "-rw------- 1 root root   403 Aug 31 20:16 proust_meta_uptovol7.csv\n",
      "-rw------- 1 root root 28281 Aug 28 16:53 proust_uptovol6.csv\n",
      "-rw------- 1 root root 33332 Aug 31 20:04 proust_uptovol7.csv\n"
     ]
    }
   ],
   "source": [
    "!ls -Al drive/MyDrive/Datasets/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "executionInfo": {
     "elapsed": 536,
     "status": "ok",
     "timestamp": 1632171127115,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "-njPvOGEFQ3U"
   },
   "outputs": [],
   "source": [
    "path = 'drive/MyDrive/Datasets/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-M5hf1eIBtnQ"
   },
   "source": [
    "FIles content:\n",
    "* proust3: la prigioniera, tutto in paper\n",
    "* proust4: la fuggitiva, tutto in ebook\n",
    "* Proust: un po' nome dei paesi Vol2, merged for all others\n",
    "\n",
    "To do:\n",
    "* sistemare proust2\n",
    "* creare generatore date\n",
    "* creare generatore pagine\n",
    "* mettere tutto in csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "K7W4bEZkFY-E"
   },
   "source": [
    "## Dates Generators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "E6pHXZ4vHgo5"
   },
   "outputs": [],
   "source": [
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-02T22:41:14.677244Z",
     "iopub.status.busy": "2021-07-02T22:41:14.677042Z",
     "iopub.status.idle": "2021-07-02T22:41:14.680515Z",
     "shell.execute_reply": "2021-07-02T22:41:14.679660Z",
     "shell.execute_reply.started": "2021-07-02T22:41:14.677221Z"
    },
    "id": "ZmSpMSRc-P6o"
   },
   "outputs": [],
   "source": [
    "start = datetime.datetime(2017, 6, 11) ## inclusive\n",
    "end = datetime.datetime(2018, 5, 20) ## inclusive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-02T22:41:43.463200Z",
     "iopub.status.busy": "2021-07-02T22:41:43.462990Z",
     "iopub.status.idle": "2021-07-02T22:41:43.466554Z",
     "shell.execute_reply": "2021-07-02T22:41:43.465805Z",
     "shell.execute_reply.started": "2021-07-02T22:41:43.463175Z"
    },
    "id": "7x_cvuV0-P6o"
   },
   "outputs": [],
   "source": [
    "index = pd.date_range(start, end)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-02T22:48:04.440641Z",
     "iopub.status.busy": "2021-07-02T22:48:04.440435Z",
     "iopub.status.idle": "2021-07-02T22:48:04.444462Z",
     "shell.execute_reply": "2021-07-02T22:48:04.443877Z",
     "shell.execute_reply.started": "2021-07-02T22:48:04.440618Z"
    },
    "id": "QC2ckIct-P6o"
   },
   "outputs": [],
   "source": [
    "ll = index.astype(str).to_list()\n",
    "for i in ll:\n",
    "    print(f'{i},')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HJJ8iO3aGsqC"
   },
   "source": [
    "Now make the generator for random walk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 292,
     "status": "ok",
     "timestamp": 1628096453575,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "r9BVi5WmHC3b",
    "outputId": "5902a403-95c6-4e4c-94a5-159c2386b1f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "344"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NkAAIMH-HFlP"
   },
   "outputs": [],
   "source": [
    "npages = 551-103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 348,
     "status": "ok",
     "timestamp": 1628096975053,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "aQOeQOr4HKMS",
    "outputId": "5f20bdd5-56a2-4181-e7b4-8c9346d54dcb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "448"
      ]
     },
     "execution_count": 27,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npages\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 221,
     "status": "ok",
     "timestamp": 1628096985877,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "3VYgroi4JE29",
    "outputId": "71500952-b70d-47fe-9cd9-eaed66cd84e5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "149.33333333333334"
      ]
     },
     "execution_count": 28,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npages/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 318,
     "status": "ok",
     "timestamp": 1628097141487,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "4wraFxtCHP_T",
    "outputId": "a7c27a8d-2726-49d6-e12b-d3714ad5d606"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum is -24\n",
      "Sum is 4\n",
      "Sum is 43\n",
      "Sum is 37\n",
      "Sum is 0\n"
     ]
    }
   ],
   "source": [
    "# generate poisson. N elements, with mean mu\n",
    "ss = 0\n",
    "while ss-448:\n",
    "  a = np.random.poisson(3, 150)\n",
    "  ss = a.sum()\n",
    "  print(f'Sum is {ss-448}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 240,
     "status": "ok",
     "timestamp": 1628097159539,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "ZI-qIF6dJvm6",
    "outputId": "4a945ab0-70a1-492b-d8d6-a449c35089ff"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 3, 5, 1, 3, 3, 7, 4, 0, 5, 6, 1, 2, 4, 2, 0, 3, 1, 3, 3, 0, 2,\n",
       "       3, 4, 3, 4, 1, 1, 2, 4, 2, 3, 3, 2, 4, 7, 1, 4, 2, 3, 3, 3, 1, 5,\n",
       "       2, 3, 3, 2, 2, 5, 4, 1, 5, 1, 1, 4, 3, 5, 7, 6, 8, 4, 2, 1, 5, 2,\n",
       "       3, 2, 3, 0, 2, 3, 2, 4, 2, 3, 5, 1, 3, 2, 1, 3, 4, 0, 1, 3, 4, 5,\n",
       "       2, 2, 5, 2, 2, 3, 6, 2, 2, 3, 5, 2, 1, 2, 3, 1, 0, 5, 6, 3, 2, 5,\n",
       "       3, 3, 5, 4, 3, 4, 4, 3, 4, 3, 3, 1, 2, 4, 5, 1, 2, 2, 2, 4, 5, 4,\n",
       "       3, 4, 1, 4, 7, 2, 2, 3, 5, 4, 2, 2, 3, 3, 2, 1, 3, 2])"
      ]
     },
     "execution_count": 32,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 331,
     "status": "ok",
     "timestamp": 1628097170098,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "0IUq1C6VJx7z",
    "outputId": "63ff7729-1612-4660-ac6f-b5afa3ad16ae"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "448"
      ]
     },
     "execution_count": 34,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "W57Rv2YBJ0f7"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WYOPm3JTHwAM"
   },
   "source": [
    "## Single Volumes file preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3dP1-qsDC5IV"
   },
   "source": [
    "### Vol1\n",
    "\n",
    "Only final date: 20/5/2018\n",
    "\n",
    "Probably started in 2017, let's say in June\n",
    "\n",
    "p103-551"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-02T22:41:14.677244Z",
     "iopub.status.busy": "2021-07-02T22:41:14.677042Z",
     "iopub.status.idle": "2021-07-02T22:41:14.680515Z",
     "shell.execute_reply": "2021-07-02T22:41:14.679660Z",
     "shell.execute_reply.started": "2021-07-02T22:41:14.677221Z"
    },
    "id": "DIqqqNdUKaZq"
   },
   "outputs": [],
   "source": [
    "start = datetime.datetime(2017, 6, 11) ## inclusive\n",
    "end = datetime.datetime(2018, 5, 20) ## inclusive\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "ll = index.astype(str).to_list()\n",
    "for i in ll:\n",
    "    print(f'{i},')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ixrM9iW7KaZ2"
   },
   "source": [
    "Now make the generator for random walk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 292,
     "status": "ok",
     "timestamp": 1628096453575,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "_8FqqzTMKaZ4",
    "outputId": "5902a403-95c6-4e4c-94a5-159c2386b1f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "344"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "eJ4Q5gA1KaZ-"
   },
   "outputs": [],
   "source": [
    "npages = 551-103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 348,
     "status": "ok",
     "timestamp": 1628096975053,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "avsCOarRKaaA",
    "outputId": "5f20bdd5-56a2-4181-e7b4-8c9346d54dcb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "448"
      ]
     },
     "execution_count": 27,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npages\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 221,
     "status": "ok",
     "timestamp": 1628096985877,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "C13Rk3YKKaaD",
    "outputId": "71500952-b70d-47fe-9cd9-eaed66cd84e5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "149.33333333333334"
      ]
     },
     "execution_count": 28,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npages/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 338,
     "status": "ok",
     "timestamp": 1628098137138,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "wGhxWA8dKaaF",
    "outputId": "12c24a9a-2589-438a-d989-1121d5626f0b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum is -12\n",
      "Sum is 1\n",
      "Sum is -14\n",
      "Sum is 4\n",
      "Sum is 29\n",
      "Sum is 17\n",
      "Sum is 49\n",
      "Sum is 14\n",
      "Sum is -3\n",
      "Sum is -9\n",
      "Sum is 6\n",
      "Sum is 6\n",
      "Sum is 26\n",
      "Sum is -33\n",
      "Sum is 7\n",
      "Sum is -11\n",
      "Sum is -29\n",
      "Sum is -34\n",
      "Sum is -21\n",
      "Sum is 18\n",
      "Sum is 24\n",
      "Sum is 29\n",
      "Sum is -9\n",
      "Sum is 45\n",
      "Sum is 33\n",
      "Sum is 17\n",
      "Sum is 0\n"
     ]
    }
   ],
   "source": [
    "# generate poisson. N elements, with mean mu\n",
    "days_read = 150\n",
    "ss = 0\n",
    "while ss-448:\n",
    "  a = np.random.poisson(3, days_read)\n",
    "  ss = a.sum()\n",
    "  print(f'Sum is {ss-448}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 269,
     "status": "ok",
     "timestamp": 1628098142686,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "c6wrgUV_KaaH",
    "outputId": "78b7d396-9a02-4d7a-a05e-915eb12e86b5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 5, 1, 8, 3, 3, 3, 1, 1, 4, 7, 1, 4, 3, 5, 2, 4, 1, 1, 4, 4, 4,\n",
       "       2, 3, 1, 1, 3, 0, 2, 3, 6, 5, 5, 2, 2, 2, 3, 1, 7, 5, 4, 4, 1, 1,\n",
       "       3, 2, 6, 4, 2, 5, 3, 1, 5, 3, 1, 4, 3, 3, 2, 4, 3, 5, 1, 4, 2, 1,\n",
       "       2, 3, 5, 2, 0, 7, 2, 4, 3, 1, 3, 3, 2, 3, 2, 5, 7, 3, 1, 7, 4, 0,\n",
       "       1, 0, 4, 1, 4, 2, 6, 2, 3, 5, 2, 2, 3, 5, 3, 4, 4, 2, 1, 4, 2, 6,\n",
       "       6, 2, 2, 1, 4, 3, 4, 3, 2, 3, 1, 0, 1, 4, 6, 4, 1, 2, 2, 2, 2, 8,\n",
       "       0, 2, 5, 4, 6, 0, 2, 3, 2, 6, 2, 2, 1, 6, 4, 2, 1, 0])"
      ]
     },
     "execution_count": 59,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 218,
     "status": "ok",
     "timestamp": 1628098146483,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "PuItzlqBKaaJ",
    "outputId": "3a9cc0de-581d-4fc9-b0bb-47dac26c6d61"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "448"
      ]
     },
     "execution_count": 60,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "494SwCiLKaaL"
   },
   "outputs": [],
   "source": [
    "# create number of zeros\n",
    "zz = np.zeros(len(ll)-days_read)\n",
    "\n",
    "## merge with a\n",
    "#page_read = np.random.shuffle(np.append(a, zz))\\\n",
    "\n",
    "page_read = np.append(a, zz)\n",
    "np.random.shuffle(page_read)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 290,
     "status": "ok",
     "timestamp": 1628098152489,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "OUkEVgF4C5yh",
    "outputId": "8f790bdb-b0c6-4500-f2e5-5edfc34bbee1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "344"
      ]
     },
     "execution_count": 62,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(page_read)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 578,
     "status": "ok",
     "timestamp": 1628102231400,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "5H6kEP0yL8g2",
    "outputId": "203b6e4b-1de3-40f0-bddc-aec7bf4a07c0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 0., 0., 0., 0., 0., 0., 0., 0., 3., 0., 0., 0., 7., 0., 0., 0.,\n",
       "       0., 2., 4., 0., 0., 0., 0., 0., 0., 5., 0., 0., 1., 2., 1., 0., 0.,\n",
       "       0., 4., 0., 0., 2., 1., 0., 0., 2., 3., 2., 1., 0., 0., 0., 0., 4.,\n",
       "       3., 4., 0., 0., 1., 0., 4., 1., 2., 3., 0., 0., 4., 0., 0., 0., 2.,\n",
       "       3., 0., 5., 2., 0., 7., 0., 0., 4., 4., 3., 0., 0., 3., 0., 6., 0.,\n",
       "       2., 0., 0., 3., 3., 0., 0., 4., 0., 0., 0., 0., 4., 7., 0., 0., 0.,\n",
       "       4., 0., 0., 0., 2., 0., 0., 0., 2., 5., 0., 3., 0., 1., 0., 2., 0.,\n",
       "       0., 5., 0., 4., 2., 7., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 1., 0., 0., 0., 3., 0., 8., 3., 0., 6., 0., 0., 3., 0., 0., 0.,\n",
       "       6., 0., 0., 0., 3., 0., 2., 2., 0., 3., 2., 0., 0., 0., 3., 0., 3.,\n",
       "       0., 0., 0., 2., 0., 4., 0., 4., 2., 0., 0., 5., 2., 4., 1., 3., 3.,\n",
       "       0., 0., 0., 0., 0., 0., 6., 0., 0., 0., 3., 0., 0., 0., 1., 5., 0.,\n",
       "       0., 0., 2., 0., 0., 6., 0., 0., 0., 1., 1., 0., 0., 0., 2., 0., 0.,\n",
       "       0., 0., 1., 0., 2., 0., 0., 3., 0., 0., 0., 6., 0., 0., 0., 2., 2.,\n",
       "       0., 0., 3., 0., 1., 0., 4., 0., 0., 0., 8., 1., 1., 0., 4., 0., 0.,\n",
       "       3., 1., 0., 0., 0., 5., 0., 0., 0., 5., 0., 1., 0., 0., 4., 4., 4.,\n",
       "       0., 0., 5., 6., 3., 0., 4., 3., 0., 2., 1., 0., 0., 7., 0., 1., 1.,\n",
       "       5., 3., 0., 0., 0., 6., 0., 0., 2., 0., 4., 2., 0., 1., 0., 4., 0.,\n",
       "       2., 0., 0., 0., 4., 2., 0., 0., 0., 5., 2., 0., 0., 0., 5., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 3., 0., 0., 4., 0., 2., 5., 0., 0., 1., 2., 0.,\n",
       "       3., 2., 1., 6.])"
      ]
     },
     "execution_count": 64,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 592,
     "status": "ok",
     "timestamp": 1628102254424,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "fHT_BgVjdKmD",
    "outputId": "d16441be-7ed9-4c46-bb14-9071404670d2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2.,   2.,   2.,   2.,   2.,   2.,   2.,   2.,   2.,   5.,   5.,\n",
       "         5.,   5.,  12.,  12.,  12.,  12.,  12.,  14.,  18.,  18.,  18.,\n",
       "        18.,  18.,  18.,  18.,  23.,  23.,  23.,  24.,  26.,  27.,  27.,\n",
       "        27.,  27.,  31.,  31.,  31.,  33.,  34.,  34.,  34.,  36.,  39.,\n",
       "        41.,  42.,  42.,  42.,  42.,  42.,  46.,  49.,  53.,  53.,  53.,\n",
       "        54.,  54.,  58.,  59.,  61.,  64.,  64.,  64.,  68.,  68.,  68.,\n",
       "        68.,  70.,  73.,  73.,  78.,  80.,  80.,  87.,  87.,  87.,  91.,\n",
       "        95.,  98.,  98.,  98., 101., 101., 107., 107., 109., 109., 109.,\n",
       "       112., 115., 115., 115., 119., 119., 119., 119., 119., 123., 130.,\n",
       "       130., 130., 130., 134., 134., 134., 134., 136., 136., 136., 136.,\n",
       "       138., 143., 143., 146., 146., 147., 147., 149., 149., 149., 154.,\n",
       "       154., 158., 160., 167., 167., 168., 168., 169., 169., 169., 169.,\n",
       "       169., 169., 169., 169., 169., 170., 170., 170., 170., 173., 173.,\n",
       "       181., 184., 184., 190., 190., 190., 193., 193., 193., 193., 199.,\n",
       "       199., 199., 199., 202., 202., 204., 206., 206., 209., 211., 211.,\n",
       "       211., 211., 214., 214., 217., 217., 217., 217., 219., 219., 223.,\n",
       "       223., 227., 229., 229., 229., 234., 236., 240., 241., 244., 247.,\n",
       "       247., 247., 247., 247., 247., 247., 253., 253., 253., 253., 256.,\n",
       "       256., 256., 256., 257., 262., 262., 262., 262., 264., 264., 264.,\n",
       "       270., 270., 270., 270., 271., 272., 272., 272., 272., 274., 274.,\n",
       "       274., 274., 274., 275., 275., 277., 277., 277., 280., 280., 280.,\n",
       "       280., 286., 286., 286., 286., 288., 290., 290., 290., 293., 293.,\n",
       "       294., 294., 298., 298., 298., 298., 306., 307., 308., 308., 312.,\n",
       "       312., 312., 315., 316., 316., 316., 316., 321., 321., 321., 321.,\n",
       "       326., 326., 327., 327., 327., 331., 335., 339., 339., 339., 344.,\n",
       "       350., 353., 353., 357., 360., 360., 362., 363., 363., 363., 370.,\n",
       "       370., 371., 372., 377., 380., 380., 380., 380., 386., 386., 386.,\n",
       "       388., 388., 392., 394., 394., 395., 395., 399., 399., 401., 401.,\n",
       "       401., 401., 405., 407., 407., 407., 407., 412., 414., 414., 414.,\n",
       "       414., 419., 419., 419., 419., 419., 419., 419., 419., 422., 422.,\n",
       "       422., 426., 426., 428., 433., 433., 433., 434., 436., 436., 439.,\n",
       "       441., 442., 448.])"
      ]
     },
     "execution_count": 65,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_read.cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Xzh10gTydNvF"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HHOYoJpuM8RO"
   },
   "outputs": [],
   "source": [
    "for dd,pp in zip(ll,page_read.cumsum()):\n",
    "    print(f'{dd},{int(pp)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qiH5sPcOdlXQ"
   },
   "source": [
    "Results saved in `proust01.txt`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eR2J_ilGeJ2_"
   },
   "source": [
    "### Vol2\n",
    "\n",
    "p21-571\n",
    "\n",
    "200: 8-7-18  \n",
    "300: 15/8/18  \n",
    "400: 3/10/18  \n",
    "500: 30-11-18   \n",
    "end: 31/12/18   \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "a4dF77YjGEf9"
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "start = datetime.datetime(2018, 7, 9) ## inclusive\n",
    "end = datetime.datetime(2018, 12, 31) ## inclusive\n",
    "end = datetime.datetime(2018, 11, 8) ## inclusive\n",
    "start = datetime.datetime(2018, 8, 16) ## inclusive\n",
    "start = datetime.datetime(2018, 10, 4) ## inclusive\n",
    "end = datetime.datetime(2018, 11, 30) ## inclusive\n",
    "\n",
    "\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "ll = index.astype(str).to_list()\n",
    "#for i in ll:\n",
    "#    print(f'{i},')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zbpNGxTgImxB"
   },
   "outputs": [],
   "source": [
    "#len(ll)\n",
    "offset = 0\n",
    "npages = 100-offset\n",
    "\n",
    "npages/3\n",
    "# generate poisson. N elements, with mean mu\n",
    "page_a_day = 4\n",
    "days_read = int(npages/page_a_day)\n",
    "ss = 0\n",
    "while ss-npages:\n",
    "  a = np.random.poisson(npages/days_read, days_read)\n",
    "  ss = a.sum()\n",
    "  print(f'Sum is {ss-npages}')\n",
    "\n",
    "# create number of zeros\n",
    "zeros_to_add = len(ll)-days_read\n",
    "print(f'Zeros added: {len(ll)-days_read} and nozero is {days_read}') \n",
    "zz = np.zeros(len(ll)-days_read)\n",
    "\n",
    "## merge with a\n",
    "\n",
    "page_read = np.append(a, zz)\n",
    "np.random.shuffle(page_read)\n",
    "print(f'total length page array {len(page_read)} and it has to be {npages}')\n",
    "print(page_read.cumsum())\n",
    "\n",
    "for dd,pp in zip(ll,page_read.cumsum()):\n",
    "  off = 0\n",
    "  off = 379\n",
    "  print(f'{dd},{int(pp)+off}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4JAQ17uQIINs"
   },
   "outputs": [],
   "source": [
    "# from 1109-1231\n",
    "aa = [437,\n",
    "      437,\n",
    "449,\n",
    "449,\n",
    "455,\n",
    "459,\n",
    "459,\n",
    "463,\n",
    "463,\n",
    "467,\n",
    "467,\n",
    "468,\n",
    "469,\n",
    "471,\n",
    "471,\n",
    "471,\n",
    "471,\n",
    "471,\n",
    "472,\n",
    "472,\n",
    "475,\n",
    "477,\n",
    "477,\n",
    "480,\n",
    "482,\n",
    "482,\n",
    "482,\n",
    "482,\n",
    "483,\n",
    "485,\n",
    "485,\n",
    "489,\n",
    "491,\n",
    "491,\n",
    "497,\n",
    "501,\n",
    "507,\n",
    "507,\n",
    "507,\n",
    "509,\n",
    "513,\n",
    "519,\n",
    "521,\n",
    "527,\n",
    "531,\n",
    "533,\n",
    "536,\n",
    "538,\n",
    "542,\n",
    "542,\n",
    "545,\n",
    "547,\n",
    "550]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "caLfdLK6t44N"
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "start = datetime.datetime(2018, 11, 9) ## inclusive\n",
    "end = datetime.datetime(2018, 12, 31) ## inclusive\n",
    "\n",
    "\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "ll = index.astype(str).to_list()\n",
    "#for i in ll:\n",
    "#    print(f'{i},')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 377,
     "status": "ok",
     "timestamp": 1628157279943,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "iD_9lEaQvCYS",
    "outputId": "a80d64aa-50e7-4b5b-85ce-6d4379cc858a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53"
      ]
     },
     "execution_count": 6,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 12,
     "status": "ok",
     "timestamp": 1628157284986,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "P6w30PVXvHlt",
    "outputId": "28ba702e-ffb2-4cae-9095-c12dd9fbbfc4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(aa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 364,
     "status": "ok",
     "timestamp": 1628157328575,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "zEnqXM8ovI5M",
    "outputId": "70e7220b-d3e8-405c-fc7b-f926af8570d2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2018-11-09,437\n",
      "2018-11-10,437\n",
      "2018-11-11,449\n",
      "2018-11-12,449\n",
      "2018-11-13,455\n",
      "2018-11-14,459\n",
      "2018-11-15,459\n",
      "2018-11-16,463\n",
      "2018-11-17,463\n",
      "2018-11-18,467\n",
      "2018-11-19,467\n",
      "2018-11-20,468\n",
      "2018-11-21,469\n",
      "2018-11-22,471\n",
      "2018-11-23,471\n",
      "2018-11-24,471\n",
      "2018-11-25,471\n",
      "2018-11-26,471\n",
      "2018-11-27,472\n",
      "2018-11-28,472\n",
      "2018-11-29,475\n",
      "2018-11-30,477\n",
      "2018-12-01,477\n",
      "2018-12-02,480\n",
      "2018-12-03,482\n",
      "2018-12-04,482\n",
      "2018-12-05,482\n",
      "2018-12-06,482\n",
      "2018-12-07,483\n",
      "2018-12-08,485\n",
      "2018-12-09,485\n",
      "2018-12-10,489\n",
      "2018-12-11,491\n",
      "2018-12-12,491\n",
      "2018-12-13,497\n",
      "2018-12-14,501\n",
      "2018-12-15,507\n",
      "2018-12-16,507\n",
      "2018-12-17,507\n",
      "2018-12-18,509\n",
      "2018-12-19,513\n",
      "2018-12-20,519\n",
      "2018-12-21,521\n",
      "2018-12-22,527\n",
      "2018-12-23,531\n",
      "2018-12-24,533\n",
      "2018-12-25,536\n",
      "2018-12-26,538\n",
      "2018-12-27,542\n",
      "2018-12-28,542\n",
      "2018-12-29,545\n",
      "2018-12-30,547\n",
      "2018-12-31,550\n"
     ]
    }
   ],
   "source": [
    "for i,j in zip(ll,aa):\n",
    "  print(f'{i},{j}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Y-cBBxNSvTlS"
   },
   "source": [
    "Results saved in `proust01.txt`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fhxnSPnMvm7f"
   },
   "source": [
    "### Vol 3\n",
    "p 19-659\n",
    "\n",
    "100: 1/3/2019  \n",
    "200: 4/5  \n",
    "300: 11/6  \n",
    "400: 16/7  \n",
    "500: 10/8  \n",
    "600: 3/10  \n",
    "fine: 14/10  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Dej_FpOfxeXj"
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "start = datetime.datetime(2019, 1, 1) ## inclusive\n",
    "t0 = datetime.datetime(2019, 3, 1) ## inclusive\n",
    "t0 = datetime.datetime(2019, 5, 5) ## inclusive\n",
    "t0 = datetime.datetime(2019, 6, 12) ## inclusive\n",
    "t0 = datetime.datetime(2019, 7, 17) ## inclusive\n",
    "t0 = datetime.datetime(2019, 8, 11) ## inclusive\n",
    "t0 = datetime.datetime(2019, 10, 4) ## inclusive\n",
    "t1 = datetime.datetime(2019, 10, 14) ## inclusive\n",
    "\n",
    "\n",
    "start=t0\n",
    "end=t1\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "ll = index.astype(str).to_list()\n",
    "#for i in ll:\n",
    "#    print(f'{i},')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 270,
     "status": "ok",
     "timestamp": 1628162041162,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "aMUmz_8ExeXk",
    "outputId": "8a514b0d-3d3c-4a73-cdb2-c6141b01fb92"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum is -13\n",
      "Sum is 2\n",
      "Sum is -4\n",
      "Sum is 7\n",
      "Sum is 0\n",
      "Zeros added: 0 and nozero is 11\n",
      "total length page array 11 and it has to be 11\n",
      "[ 5.  3.  6.  7.  5.  2.  7.  6.  7. 10.  1.]\n",
      "[ 5.  8. 14. 21. 26. 28. 35. 41. 48. 58. 59.]\n",
      "2019-10-04,586\n",
      "2019-10-05,589\n",
      "2019-10-06,595\n",
      "2019-10-07,602\n",
      "2019-10-08,607\n",
      "2019-10-09,609\n",
      "2019-10-10,616\n",
      "2019-10-11,622\n",
      "2019-10-12,629\n",
      "2019-10-13,639\n",
      "2019-10-14,640\n"
     ]
    }
   ],
   "source": [
    "#len(ll)\n",
    "offset = 0\n",
    "npages = 59-offset\n",
    "\n",
    "npages/3\n",
    "# generate poisson. N elements, with mean mu\n",
    "page_a_day = 5\n",
    "days_read = int(npages/page_a_day)\n",
    "ss = 0\n",
    "while ss-npages:\n",
    "  a = np.random.poisson(npages/days_read, days_read)\n",
    "  if a[-1] == 0:\n",
    "    print('Last zero, skip...')\n",
    "    continue \n",
    "  else:\n",
    "    ss = a.sum()\n",
    "    print(f'Sum is {ss-npages}')\n",
    "\n",
    "# create number of zeros\n",
    "zeros_to_add = len(ll)-days_read\n",
    "print(f'Zeros added: {len(ll)-days_read} and nozero is {days_read}') \n",
    "zz = np.zeros(len(ll)-days_read)\n",
    "\n",
    "## merge with a\n",
    "\n",
    "bb = a[:-1] ## remove last\n",
    "page_read = np.append(bb, zz)\n",
    "np.random.shuffle(page_read)\n",
    "page_read = np.append(page_read, a[-1])\n",
    "print(f'total length page array {len(page_read)} and it has to be {len(ll)}')\n",
    "print(page_read)\n",
    "print(page_read.cumsum())\n",
    "\n",
    "for dd,pp in zip(ll,page_read.cumsum()):\n",
    "  #off = 0\n",
    "  off = 581\n",
    "  print(f'{dd},{int(pp)+off}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zMLLZHZRx_dd"
   },
   "source": [
    "### Vol 4\n",
    "\n",
    "p 23-650\n",
    "\n",
    "100: 30/12  \n",
    "200: 29/2/20  \n",
    "300: 1/4  \n",
    "400: 25/5  \n",
    "500: 20/8  \n",
    "600: 30/9  \n",
    "fine: 13/10  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "KWTlkXSwCRsc"
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "t0 = datetime.datetime(2019, 10, 15) ## inclusive\n",
    "t0 = datetime.datetime(2019, 12, 31) ## inclusive\n",
    "t0 = datetime.datetime(2020, 3, 1) ## inclusive\n",
    "t0 = datetime.datetime(2020, 4, 2) ## inclusive\n",
    "t0 = datetime.datetime(2020, 5, 26) ## inclusive\n",
    "t0 = datetime.datetime(2020, 8, 21) ## inclusive\n",
    "t0 = datetime.datetime(2020, 10, 1) ## inclusive\n",
    "t1 = datetime.datetime(2020, 10, 13) ## inclusive\n",
    "\n",
    "\n",
    "start=t0\n",
    "end=t1\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "ll = index.astype(str).to_list()\n",
    "#for i in ll:\n",
    "#    print(f'{i},')\n",
    "offpage = 577"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 290,
     "status": "ok",
     "timestamp": 1628167898347,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "oULeNmNSCRsh",
    "outputId": "04427bcb-b541-45c3-d7c3-e02b9538d2c1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum is 4\n",
      "Sum is 5\n",
      "Sum is 4\n",
      "Sum is -9\n",
      "Sum is -3\n",
      "Sum is 1\n",
      "Sum is 6\n",
      "Sum is -7\n",
      "Sum is 0\n",
      "Zeros added: 5 and nozero is 8\n",
      "total length page array 13 and it has to be 13\n",
      "[ 2.  9.  0.  0.  2. 10.  0.  5.  6.  0.  9.  0.  7.]\n",
      "[ 2. 11. 11. 11. 13. 23. 23. 28. 34. 34. 43. 43. 50.]\n",
      "2020-10-01,579\n",
      "2020-10-02,588\n",
      "2020-10-03,588\n",
      "2020-10-04,588\n",
      "2020-10-05,590\n",
      "2020-10-06,600\n",
      "2020-10-07,600\n",
      "2020-10-08,605\n",
      "2020-10-09,611\n",
      "2020-10-10,611\n",
      "2020-10-11,620\n",
      "2020-10-12,620\n",
      "2020-10-13,627\n"
     ]
    }
   ],
   "source": [
    "#len(ll)\n",
    "offset = 0\n",
    "npages = 50-offset\n",
    "\n",
    "npages/3\n",
    "# generate poisson. N elements, with mean mu\n",
    "page_a_day = 6\n",
    "days_read = int(npages/page_a_day)\n",
    "ss = 0\n",
    "while ss-npages:\n",
    "  a = np.random.poisson(npages/days_read, days_read)\n",
    "  if a[-1] == 0:\n",
    "    print('Last zero, skip...')\n",
    "    continue \n",
    "  else:\n",
    "    ss = a.sum()\n",
    "    print(f'Sum is {ss-npages}')\n",
    "\n",
    "# create number of zeros\n",
    "zeros_to_add = len(ll)-days_read\n",
    "print(f'Zeros added: {len(ll)-days_read} and nozero is {days_read}') \n",
    "zz = np.zeros(len(ll)-days_read)\n",
    "\n",
    "## merge with a\n",
    "\n",
    "bb = a[:-1] ## remove last\n",
    "page_read = np.append(bb, zz)\n",
    "np.random.shuffle(page_read)\n",
    "page_read = np.append(page_read, a[-1])\n",
    "print(f'total length page array {len(page_read)} and it has to be {len(ll)}')\n",
    "print(page_read)\n",
    "print(page_read.cumsum())\n",
    "\n",
    "for dd,pp in zip(ll,page_read.cumsum()):\n",
    "  #off = 0\n",
    "  off = offpage\n",
    "  print(f'{dd},{int(pp)+off}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Vsp_Yl9iCJUI"
   },
   "source": [
    "### Vol 5\n",
    "\n",
    "The file `proust05p.txt` has already everything.   \n",
    "**BUT** it counts the pages (paper) as they are, i.e. starting with offset.\n",
    "\n",
    "p 21-487\n",
    "\n",
    "**ALSO** the empty dates need to be filled with previous values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JQRP02l7kcfr"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(path+'proust05p.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Cjr-TZ99kdCq"
   },
   "outputs": [],
   "source": [
    "df.columns = ['dt', 'page']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "23UwBu5gkdT4"
   },
   "outputs": [],
   "source": [
    "df.fillna(method='ffill', axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 990
    },
    "executionInfo": {
     "elapsed": 350,
     "status": "ok",
     "timestamp": 1628171366045,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "LHZxL_dsk061",
    "outputId": "6bc18ffa-9e00-4a45-ff15-a6b34deca9ee"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-15</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-16</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-17</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2020-10-19</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2020-10-20</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2020-10-22</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2020-10-23</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2020-10-24</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2020-10-25</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2020-10-26</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2020-10-27</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2020-10-28</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2020-10-29</td>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2020-11-01</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2020-11-02</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2020-11-03</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2020-11-04</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2020-11-05</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2020-11-06</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2020-11-07</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2020-11-08</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2020-11-09</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2020-11-10</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2020-11-11</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2020-11-12</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2020-10-14  21.0\n",
       "1   2020-10-15  24.0\n",
       "2   2020-10-16  27.0\n",
       "3   2020-10-17  28.0\n",
       "4   2020-10-18  28.0\n",
       "5   2020-10-19  33.0\n",
       "6   2020-10-20  35.0\n",
       "7   2020-10-21  36.0\n",
       "8   2020-10-22  38.0\n",
       "9   2020-10-23  39.0\n",
       "10  2020-10-24  41.0\n",
       "11  2020-10-25  41.0\n",
       "12  2020-10-26  41.0\n",
       "13  2020-10-27  43.0\n",
       "14  2020-10-28  43.0\n",
       "15  2020-10-29  44.0\n",
       "16  2020-10-30  44.0\n",
       "17  2020-10-31  45.0\n",
       "18  2020-11-01  45.0\n",
       "19  2020-11-02  46.0\n",
       "20  2020-11-03  46.0\n",
       "21  2020-11-04  48.0\n",
       "22  2020-11-05  48.0\n",
       "23  2020-11-06  49.0\n",
       "24  2020-11-07  52.0\n",
       "25  2020-11-08  53.0\n",
       "26  2020-11-09  53.0\n",
       "27  2020-11-10  54.0\n",
       "28  2020-11-11  56.0\n",
       "29  2020-11-12  60.0"
      ]
     },
     "execution_count": 140,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cXAdyKHUkl1h"
   },
   "outputs": [],
   "source": [
    "df.page = df.page-21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qyURDvFZkdiC"
   },
   "outputs": [],
   "source": [
    "df.page = df.page.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 325,
     "status": "ok",
     "timestamp": 1628171486324,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "03sKIabFlFln",
    "outputId": "431bd86f-89f4-4a3c-b684-979974eee4f8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-15</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-17</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>2021-04-12</td>\n",
       "      <td>447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>2021-04-13</td>\n",
       "      <td>451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>2021-04-14</td>\n",
       "      <td>460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>2021-04-15</td>\n",
       "      <td>460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>2021-04-16</td>\n",
       "      <td>466</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>185 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2020-10-14     0\n",
       "1    2020-10-15     3\n",
       "2    2020-10-16     6\n",
       "3    2020-10-17     7\n",
       "4    2020-10-18     7\n",
       "..          ...   ...\n",
       "180  2021-04-12   447\n",
       "181  2021-04-13   451\n",
       "182  2021-04-14   460\n",
       "183  2021-04-15   460\n",
       "184  2021-04-16   466\n",
       "\n",
       "[185 rows x 2 columns]"
      ]
     },
     "execution_count": 144,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NOmybzawlUF4"
   },
   "outputs": [],
   "source": [
    "df.to_csv(path+'proust05.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sG2kk3DVZY_l"
   },
   "source": [
    "### Vol 6\n",
    "\n",
    "The file `proust06e.txt` has everything\n",
    "\n",
    "* The pages are from ebbok!!\n",
    "* there is an offset to account for (maybe when transforming from ebook -> page)\n",
    "\n",
    "ebook: 173- 4652\n",
    "paper: 23-338 \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8CwgGcaPd2CA"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(path+'proust06e.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1628170898689,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "pXvh6Qole-ge",
    "outputId": "8e464b97-f038-4821-c3dc-524b17f947cf"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-04-18</td>\n",
       "      <td>234.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-04-19</td>\n",
       "      <td>274.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-04-20</td>\n",
       "      <td>304.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-04-21</td>\n",
       "      <td>354.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2021-06-13</td>\n",
       "      <td>4232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2021-06-14</td>\n",
       "      <td>4354.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2021-06-15</td>\n",
       "      <td>4443.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2021-06-16</td>\n",
       "      <td>4510.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>4652.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt    page\n",
       "0   2021-04-17     NaN\n",
       "1   2021-04-18   234.0\n",
       "2   2021-04-19   274.0\n",
       "3   2021-04-20   304.0\n",
       "4   2021-04-21   354.0\n",
       "..         ...     ...\n",
       "56  2021-06-13  4232.0\n",
       "57  2021-06-14  4354.0\n",
       "58  2021-06-15  4443.0\n",
       "59  2021-06-16  4510.0\n",
       "60  2021-06-17  4652.0\n",
       "\n",
       "[61 rows x 2 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5JvaKE75e_hh"
   },
   "outputs": [],
   "source": [
    "## fill the nan with ff\n",
    "df.fillna(method='ffill', axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1628170902301,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "Aku9sH5-hDa7",
    "outputId": "b295cffc-a366-46e1-cac6-db94668d9b59"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['dt', ' page']"
      ]
     },
     "execution_count": 113,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PeidoVuEhaO3"
   },
   "outputs": [],
   "source": [
    "df.columns = ['dt', 'page']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1628170904870,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "vGtVEL2xhtrL",
    "outputId": "3b0c1673-64cd-4ede-9f7a-61d486b47ba1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "df.page[0] = 173"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "executionInfo": {
     "elapsed": 320,
     "status": "ok",
     "timestamp": 1628170906609,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "nyM4PXw3feRk",
    "outputId": "5e326d5d-0218-4744-826e-37296927c841"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>173.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-04-18</td>\n",
       "      <td>234.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-04-19</td>\n",
       "      <td>274.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-04-20</td>\n",
       "      <td>304.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-04-21</td>\n",
       "      <td>354.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt   page\n",
       "0  2021-04-17  173.0\n",
       "1  2021-04-18  234.0\n",
       "2  2021-04-19  274.0\n",
       "3  2021-04-20  304.0\n",
       "4  2021-04-21  354.0"
      ]
     },
     "execution_count": 116,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qTjCdANlgPfr"
   },
   "outputs": [],
   "source": [
    "## transform the pages in paper pages\n",
    "\n",
    "def ebook2page(x):\n",
    "  x0=173\n",
    "  y0=23\n",
    "  x1=4652\n",
    "  y1=338\n",
    "  m=(y1-y0)/(x1-x0)\n",
    "  y=m*(x-x0)+y0\n",
    "\n",
    "  return y.astype(int)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 317,
     "status": "ok",
     "timestamp": 1628171021491,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "DG2WLi0EiiZq",
    "outputId": "a3ec15a1-0aea-45fd-b4d1-5dc6534455d3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   4,   7,   9,  12,  14,  18,  22,  25,  32,  39,  39,  46,\n",
       "        54,  54,  59,  59,  65,  69,  77,  81,  88,  94, 101, 108, 115,\n",
       "       123, 123, 123, 123, 123, 128, 128, 134, 139, 141, 145, 150, 156,\n",
       "       162, 168, 176, 183, 188, 195, 204, 208, 216, 226, 233, 239, 243,\n",
       "       252, 261, 269, 277, 285, 294, 300, 305, 315])"
      ]
     },
     "execution_count": 125,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ebook2page(df.page.values)-23"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EAd8AyS6imUE"
   },
   "outputs": [],
   "source": [
    "df.page = ebook2page(df.page.values)-23"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1628171040697,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "K9lKlwnTi4Dx",
    "outputId": "3d46beeb-277e-46be-9588-103ebeb8ffb0"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-04-18</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-04-19</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-04-20</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-04-21</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2021-06-13</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2021-06-14</td>\n",
       "      <td>294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2021-06-15</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2021-06-16</td>\n",
       "      <td>305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>315</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2021-04-17     0\n",
       "1   2021-04-18     4\n",
       "2   2021-04-19     7\n",
       "3   2021-04-20     9\n",
       "4   2021-04-21    12\n",
       "..         ...   ...\n",
       "56  2021-06-13   285\n",
       "57  2021-06-14   294\n",
       "58  2021-06-15   300\n",
       "59  2021-06-16   305\n",
       "60  2021-06-17   315\n",
       "\n",
       "[61 rows x 2 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AO6VbhOCi4xN"
   },
   "outputs": [],
   "source": [
    "df.to_csv(path+'proust06e.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RxEwLgwot3Jt"
   },
   "source": [
    "### Vol 7\n",
    "\n",
    "The file `proust07p.txt` has already everything.   \n",
    "**BUT** it counts the pages (paper) as they are, i.e. starting with offset.\n",
    "\n",
    "p 19-468\n",
    "\n",
    "**ALSO** the empty dates need to be filled with previous values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "executionInfo": {
     "elapsed": 754,
     "status": "ok",
     "timestamp": 1632171142850,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "NyMdegMIt3J4"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(path+'proust7p_tmp.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "executionInfo": {
     "elapsed": 412,
     "status": "ok",
     "timestamp": 1632171147045,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "jCmbaAz3t3J5"
   },
   "outputs": [],
   "source": [
    "df.columns = ['dt', 'page']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1632171148462,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "6lZZ2_SUt3J6"
   },
   "outputs": [],
   "source": [
    "df.fillna(method='ffill', axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 990
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171149599,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "hxHV05Gmt3J6",
    "outputId": "61a34012-10b0-4c1b-faac-7ed5a5208fe3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-19</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-20</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-22</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2021-06-23</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2021-06-24</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2021-06-25</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2021-06-26</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2021-06-27</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2021-06-28</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2021-06-29</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2021-06-30</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2021-07-02</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2021-07-03</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2021-07-04</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2021-07-05</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2021-07-06</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2021-07-07</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2021-07-08</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2021-07-09</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2021-07-10</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2021-07-11</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2021-07-12</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2021-07-13</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2021-07-14</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2021-07-15</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2021-07-16</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2021-07-17</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2021-06-18  19.0\n",
       "1   2021-06-19  19.0\n",
       "2   2021-06-20  19.0\n",
       "3   2021-06-21  19.0\n",
       "4   2021-06-22  19.0\n",
       "5   2021-06-23  19.0\n",
       "6   2021-06-24  19.0\n",
       "7   2021-06-25  19.0\n",
       "8   2021-06-26  19.0\n",
       "9   2021-06-27  19.0\n",
       "10  2021-06-28  19.0\n",
       "11  2021-06-29  19.0\n",
       "12  2021-06-30  19.0\n",
       "13  2021-07-01  19.0\n",
       "14  2021-07-02  19.0\n",
       "15  2021-07-03  26.0\n",
       "16  2021-07-04  35.0\n",
       "17  2021-07-05  35.0\n",
       "18  2021-07-06  35.0\n",
       "19  2021-07-07  35.0\n",
       "20  2021-07-08  35.0\n",
       "21  2021-07-09  35.0\n",
       "22  2021-07-10  57.0\n",
       "23  2021-07-11  57.0\n",
       "24  2021-07-12  61.0\n",
       "25  2021-07-13  70.0\n",
       "26  2021-07-14  81.0\n",
       "27  2021-07-15  88.0\n",
       "28  2021-07-16  95.0\n",
       "29  2021-07-17  95.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "executionInfo": {
     "elapsed": 474,
     "status": "ok",
     "timestamp": 1632171155458,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Fi0RbKJ6t3J7"
   },
   "outputs": [],
   "source": [
    "df.page = df.page-19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1632171156653,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "5K208k99t3J8"
   },
   "outputs": [],
   "source": [
    "df.page = df.page.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1632171157034,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "M616CkI2t3J8",
    "outputId": "d4c92a6f-3366-43b0-9e9c-8f570b42c44a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2021-06-18     0\n",
       "1   2021-06-19     0\n",
       "2   2021-06-20     0\n",
       "3   2021-06-21     0\n",
       "4   2021-06-22     0\n",
       "..         ...   ...\n",
       "90  2021-09-16   404\n",
       "91  2021-09-17   411\n",
       "92  2021-09-18   425\n",
       "93  2021-09-19   435\n",
       "94  2021-09-20   449\n",
       "\n",
       "[95 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "executionInfo": {
     "elapsed": 719,
     "status": "ok",
     "timestamp": 1632171164378,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "1Mzct3gct3J9"
   },
   "outputs": [],
   "source": [
    "df.to_csv(path+'proust07.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cMsaTdC_jzyH"
   },
   "source": [
    "### Load and transform volumes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "executionInfo": {
     "elapsed": 721,
     "status": "ok",
     "timestamp": 1632171174386,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "zge2OE1Mmuo7"
   },
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(path+'proust01.txt')\n",
    "df1.columns = ['dt', 'page']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1632171175297,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "SNf5zOHqm69-",
    "outputId": "b3abe60d-2e89-4a19-9c79-7857ff37604c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-13</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-14</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-15</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>2018-05-16</td>\n",
       "      <td>436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>2018-05-17</td>\n",
       "      <td>439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>2018-05-18</td>\n",
       "      <td>441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>2018-05-19</td>\n",
       "      <td>442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>344 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2017-06-11     2\n",
       "1    2017-06-12     2\n",
       "2    2017-06-13     2\n",
       "3    2017-06-14     2\n",
       "4    2017-06-15     2\n",
       "..          ...   ...\n",
       "339  2018-05-16   436\n",
       "340  2018-05-17   439\n",
       "341  2018-05-18   441\n",
       "342  2018-05-19   442\n",
       "343  2018-05-20   448\n",
       "\n",
       "[344 rows x 2 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 426,
     "status": "ok",
     "timestamp": 1632171177695,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "mBp-9D-5m7sD",
    "outputId": "e08c1aae-87af-44ac-9b7c-d261e5454518"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-21</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-22</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-24</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>550</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>225 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2018-05-21     3\n",
       "1    2018-05-22     6\n",
       "2    2018-05-23    10\n",
       "3    2018-05-24    13\n",
       "4    2018-05-25    16\n",
       "..          ...   ...\n",
       "220  2018-12-27   542\n",
       "221  2018-12-28   542\n",
       "222  2018-12-29   545\n",
       "223  2018-12-30   547\n",
       "224  2018-12-31   550\n",
       "\n",
       "[225 rows x 2 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.read_csv(path+'proust02.txt')\n",
    "df2.columns = ['dt', 'page']\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 499,
     "status": "ok",
     "timestamp": 1632171179122,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "9Ha98zCTnYm5",
    "outputId": "72ba4f4e-578e-45a8-c2c6-3dac2f4c4e36"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>2019-10-10</td>\n",
       "      <td>616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>2019-10-11</td>\n",
       "      <td>622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>2019-10-12</td>\n",
       "      <td>629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>2019-10-13</td>\n",
       "      <td>639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>640</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>287 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2019-01-01     3\n",
       "1    2019-01-02     3\n",
       "2    2019-01-03     3\n",
       "3    2019-01-04     3\n",
       "4    2019-01-05     7\n",
       "..          ...   ...\n",
       "282  2019-10-10   616\n",
       "283  2019-10-11   622\n",
       "284  2019-10-12   629\n",
       "285  2019-10-13   639\n",
       "286  2019-10-14   640\n",
       "\n",
       "[287 rows x 2 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = pd.read_csv(path+'proust03.txt')\n",
    "df3.columns = ['dt', 'page']\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 299,
     "status": "ok",
     "timestamp": 1632171180216,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "qSPaZuY4nd_T",
    "outputId": "62cbe46a-3f50-47b7-c537-91a5bdf9f88e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-10-15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-10-16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-10-17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-10-18</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-10-19</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2020-10-09</td>\n",
       "      <td>611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2020-10-10</td>\n",
       "      <td>611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>2020-10-12</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>2020-10-13</td>\n",
       "      <td>627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2019-10-15     0\n",
       "1    2019-10-16     0\n",
       "2    2019-10-17     0\n",
       "3    2019-10-18     4\n",
       "4    2019-10-19     4\n",
       "..          ...   ...\n",
       "360  2020-10-09   611\n",
       "361  2020-10-10   611\n",
       "362  2020-10-11   620\n",
       "363  2020-10-12   620\n",
       "364  2020-10-13   627\n",
       "\n",
       "[365 rows x 2 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4 = pd.read_csv(path+'proust04.txt')\n",
    "df4.columns = ['dt', 'page']\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 436,
     "status": "ok",
     "timestamp": 1632171181551,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "0Ol10LSqni90",
    "outputId": "e5a16cc4-8825-468d-e24f-1915fe0c703f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-15</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-17</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>2021-04-12</td>\n",
       "      <td>447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>2021-04-13</td>\n",
       "      <td>451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>2021-04-14</td>\n",
       "      <td>460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>2021-04-15</td>\n",
       "      <td>460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>2021-04-16</td>\n",
       "      <td>466</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>185 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page\n",
       "0    2020-10-14     0\n",
       "1    2020-10-15     3\n",
       "2    2020-10-16     6\n",
       "3    2020-10-17     7\n",
       "4    2020-10-18     7\n",
       "..          ...   ...\n",
       "180  2021-04-12   447\n",
       "181  2021-04-13   451\n",
       "182  2021-04-14   460\n",
       "183  2021-04-15   460\n",
       "184  2021-04-16   466\n",
       "\n",
       "[185 rows x 2 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5 = pd.read_csv(path+'proust05.csv')\n",
    "#df5.columns = ['dt', 'page']\n",
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 442,
     "status": "ok",
     "timestamp": 1632171183161,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "VOlPak5HnrJY",
    "outputId": "6d716336-0194-4622-c1dc-876f4210b796"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-04-18</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-04-19</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-04-20</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-04-21</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2021-06-13</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2021-06-14</td>\n",
       "      <td>294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2021-06-15</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2021-06-16</td>\n",
       "      <td>305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>315</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2021-04-17     0\n",
       "1   2021-04-18     4\n",
       "2   2021-04-19     7\n",
       "3   2021-04-20     9\n",
       "4   2021-04-21    12\n",
       "..         ...   ...\n",
       "56  2021-06-13   285\n",
       "57  2021-06-14   294\n",
       "58  2021-06-15   300\n",
       "59  2021-06-16   305\n",
       "60  2021-06-17   315\n",
       "\n",
       "[61 rows x 2 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df6 = pd.read_csv(path+'proust06e.csv')\n",
    "#df5.columns = ['dt', 'page']\n",
    "df6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171184074,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Z7CnT1XzxmYy",
    "outputId": "ec9c5e0c-71dd-4f83-b54c-b419b6ef8013"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page\n",
       "0   2021-06-18     0\n",
       "1   2021-06-19     0\n",
       "2   2021-06-20     0\n",
       "3   2021-06-21     0\n",
       "4   2021-06-22     0\n",
       "..         ...   ...\n",
       "90  2021-09-16   404\n",
       "91  2021-09-17   411\n",
       "92  2021-09-18   425\n",
       "93  2021-09-19   435\n",
       "94  2021-09-20   449\n",
       "\n",
       "[95 rows x 2 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df7 = pd.read_csv(path+'proust07.csv')\n",
    "#df5.columns = ['dt', 'page']\n",
    "df7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1632171185945,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "pFrYJxDloHtC"
   },
   "outputs": [],
   "source": [
    "df_arr = [df1, df2, df3, df4, df5, df6, df7]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Sb3j3BDCzts3"
   },
   "source": [
    "We need to add the total pages, that is given by the very last row.  \n",
    "We store it in a `vol_offset`\n",
    "We need an extra entry at the beginnning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "executionInfo": {
     "elapsed": 405,
     "status": "ok",
     "timestamp": 1632171198268,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Dq5Z_eTjoMxW"
   },
   "outputs": [],
   "source": [
    "vol_offset = [0]\n",
    "\n",
    "for i in df_arr:\n",
    "  ll = i.iloc[-1,1]\n",
    "  vol_offset.append(ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 7,
     "status": "ok",
     "timestamp": 1632171198663,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "ILjWN9GozccG",
    "outputId": "db945037-0add-4bd7-9190-93d80658b7e8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 448, 550, 640, 627, 466, 315, 449]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol_offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "executionInfo": {
     "elapsed": 613,
     "status": "ok",
     "timestamp": 1632171200670,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "gn1LsGhCoScz"
   },
   "outputs": [],
   "source": [
    "## calculate the cumsum()\n",
    "vol_offset_cum = np.array(vol_offset).cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1632171201008,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "QrWdTZwPo24X",
    "outputId": "64f34645-abfe-4166-b8e4-ce50759010e6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,  448,  998, 1638, 2265, 2731, 3046, 3495])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol_offset_cum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "executionInfo": {
     "elapsed": 389,
     "status": "ok",
     "timestamp": 1632171203290,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "nInrI-SZpfGY"
   },
   "outputs": [],
   "source": [
    "\n",
    "df_arr2 = []\n",
    "## add offset\n",
    "for dd,off in zip(df_arr, vol_offset_cum[:-1]):\n",
    "  dd['tot'] = dd.page + off  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 8,
     "status": "ok",
     "timestamp": 1632171209580,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Hso03mlMqfNf",
    "outputId": "e35cd393-fa97-4bc3-da5b-65a4561e1a38"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-19</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-20</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-22</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "      <td>3450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "      <td>3457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "      <td>3471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "      <td>3481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>3495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page   tot\n",
       "0   2021-06-18     0  3046\n",
       "1   2021-06-19     0  3046\n",
       "2   2021-06-20     0  3046\n",
       "3   2021-06-21     0  3046\n",
       "4   2021-06-22     0  3046\n",
       "..         ...   ...   ...\n",
       "90  2021-09-16   404  3450\n",
       "91  2021-09-17   411  3457\n",
       "92  2021-09-18   425  3471\n",
       "93  2021-09-19   435  3481\n",
       "94  2021-09-20   449  3495\n",
       "\n",
       "[95 rows x 3 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0CK4Ucv000wZ"
   },
   "source": [
    "OK it worked as the first entry has the correct offset.\n",
    "\n",
    "Let's check another one that has first page > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 260,
     "status": "ok",
     "timestamp": 1630440194716,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "_ofmdnpf1JAI",
    "outputId": "40f83d51-398c-49b5-d70c-d51cc43aeeb1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>7</td>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>2019-10-10</td>\n",
       "      <td>616</td>\n",
       "      <td>1614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>2019-10-11</td>\n",
       "      <td>622</td>\n",
       "      <td>1620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>2019-10-12</td>\n",
       "      <td>629</td>\n",
       "      <td>1627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>2019-10-13</td>\n",
       "      <td>639</td>\n",
       "      <td>1637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>640</td>\n",
       "      <td>1638</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>287 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page   tot\n",
       "0    2019-01-01     3  1001\n",
       "1    2019-01-02     3  1001\n",
       "2    2019-01-03     3  1001\n",
       "3    2019-01-04     3  1001\n",
       "4    2019-01-05     7  1005\n",
       "..          ...   ...   ...\n",
       "282  2019-10-10   616  1614\n",
       "283  2019-10-11   622  1620\n",
       "284  2019-10-12   629  1627\n",
       "285  2019-10-13   639  1637\n",
       "286  2019-10-14   640  1638\n",
       "\n",
       "[287 rows x 3 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 ##offset should be 998"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 249,
     "status": "ok",
     "timestamp": 1630440200544,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "MRlw-Juy1PP3",
    "outputId": "5ea86f62-665c-4d1f-d7f5-fa417791ec12"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-13</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-14</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>2018-05-16</td>\n",
       "      <td>436</td>\n",
       "      <td>436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>2018-05-17</td>\n",
       "      <td>439</td>\n",
       "      <td>439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>2018-05-18</td>\n",
       "      <td>441</td>\n",
       "      <td>441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>2018-05-19</td>\n",
       "      <td>442</td>\n",
       "      <td>442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>448</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>344 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             dt  page  tot\n",
       "0    2017-06-11     2    2\n",
       "1    2017-06-12     2    2\n",
       "2    2017-06-13     2    2\n",
       "3    2017-06-14     2    2\n",
       "4    2017-06-15     2    2\n",
       "..          ...   ...  ...\n",
       "339  2018-05-16   436  436\n",
       "340  2018-05-17   439  439\n",
       "341  2018-05-18   441  441\n",
       "342  2018-05-19   442  442\n",
       "343  2018-05-20   448  448\n",
       "\n",
       "[344 rows x 3 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-GnYktkQ11oR"
   },
   "source": [
    "I want now to add a column with the Volume Number, 1 to 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 380,
     "status": "ok",
     "timestamp": 1632171220259,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "zFDT3E26160L",
    "outputId": "2efff098-0c20-4a08-b213-08e5d7df2a46"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol_number = [i+1 for i in range(7)]\n",
    "vol_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "executionInfo": {
     "elapsed": 294,
     "status": "ok",
     "timestamp": 1632171223009,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "7tjH7QWz2ipH"
   },
   "outputs": [],
   "source": [
    "## add volume name\n",
    "for dd,v_i in zip(df_arr, vol_number):\n",
    "  dd['Vol_Num'] = v_i  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171224559,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "_VzKjQ5O2jcB",
    "outputId": "5332744c-45df-4626-f3f0-551bc666bd6f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "      <th>Vol_Num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-19</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-20</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-22</td>\n",
       "      <td>0</td>\n",
       "      <td>3046</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "      <td>3450</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "      <td>3457</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "      <td>3471</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "      <td>3481</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>3495</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page   tot  Vol_Num\n",
       "0   2021-06-18     0  3046        7\n",
       "1   2021-06-19     0  3046        7\n",
       "2   2021-06-20     0  3046        7\n",
       "3   2021-06-21     0  3046        7\n",
       "4   2021-06-22     0  3046        7\n",
       "..         ...   ...   ...      ...\n",
       "90  2021-09-16   404  3450        7\n",
       "91  2021-09-17   411  3457        7\n",
       "92  2021-09-18   425  3471        7\n",
       "93  2021-09-19   435  3481        7\n",
       "94  2021-09-20   449  3495        7\n",
       "\n",
       "[95 rows x 4 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XKPxYP8U2jxR"
   },
   "source": [
    "## Make the combined dataset and save"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "executionInfo": {
     "elapsed": 314,
     "status": "ok",
     "timestamp": 1632171231522,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "pDw8p5CsqgkA"
   },
   "outputs": [],
   "source": [
    "## Put eveything together\n",
    "df_tot = pd.concat(df_arr, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 328,
     "status": "ok",
     "timestamp": 1632171235330,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "tPoNlpxY1Vne",
    "outputId": "8a8781ec-df0f-4cf3-f74a-c2688414253b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "      <th>Vol_Num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-13</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-14</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "      <td>3450</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "      <td>3457</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "      <td>3471</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "      <td>3481</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>3495</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1562 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            dt  page   tot  Vol_Num\n",
       "0   2017-06-11     2     2        1\n",
       "1   2017-06-12     2     2        1\n",
       "2   2017-06-13     2     2        1\n",
       "3   2017-06-14     2     2        1\n",
       "4   2017-06-15     2     2        1\n",
       "..         ...   ...   ...      ...\n",
       "90  2021-09-16   404  3450        7\n",
       "91  2021-09-17   411  3457        7\n",
       "92  2021-09-18   425  3471        7\n",
       "93  2021-09-19   435  3481        7\n",
       "94  2021-09-20   449  3495        7\n",
       "\n",
       "[1562 rows x 4 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "executionInfo": {
     "elapsed": 408,
     "status": "ok",
     "timestamp": 1632171267776,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "WVOtjuaFq0jG"
   },
   "outputs": [],
   "source": [
    "df_tot.to_csv(path+'proust_final.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1cOti44XnrSz"
   },
   "source": [
    "## Make meta-df with generic info on all volumes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cAFcTdf63g1M"
   },
   "source": [
    "Let's create a vector with first date of the volume, and another with the last \n",
    "date (that should be -1 of the first on next volume)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 296,
     "status": "ok",
     "timestamp": 1632171285577,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "96v2BO2C2jq0",
    "outputId": "90cc249f-6ef4-4896-e4c7-967d695c99cc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2017-06-11',\n",
       " '2018-05-21',\n",
       " '2019-01-01',\n",
       " '2019-10-15',\n",
       " '2020-10-14',\n",
       " '2021-04-17',\n",
       " '2021-06-18']"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_date_vol = [dd.dt.values[0] for dd in df_arr]\n",
    "start_date_vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1632171286782,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "F0Rot-aX2juR",
    "outputId": "02450685-3bb0-44d0-ca3d-12afea126d85"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2018-05-20',\n",
       " '2018-12-31',\n",
       " '2019-10-14',\n",
       " '2020-10-13',\n",
       " '2021-04-16',\n",
       " '2021-06-17',\n",
       " '2021-09-20']"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "end_date_vol = [dd.dt.values[-1] for dd in df_arr]\n",
    "end_date_vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1632171288780,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Z2palg5in8SV"
   },
   "outputs": [],
   "source": [
    "df_meta = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1632171290119,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "35YR2eqAoCQi"
   },
   "outputs": [],
   "source": [
    "vol_number = [i+1 for i in range(7)]\n",
    "df_meta[\"Vol_Num\"] = vol_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1632171291299,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "M36H58vFoRdq"
   },
   "outputs": [],
   "source": [
    "df_meta['Start_dt'] = start_date_vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1632171291690,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "bDr93ae3o4PB"
   },
   "outputs": [],
   "source": [
    "df_meta['End_dt'] = end_date_vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171292429,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "44dM5OO50zJi",
    "outputId": "47366b52-bf6b-4b4c-c08e-42fae41d82f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 448, 550, 640, 627, 466, 315, 449]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol_offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1632171295051,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "Ctj3fs_Ao8Ni"
   },
   "outputs": [],
   "source": [
    "## put number of page of each Volumes\n",
    "df_meta['Vol_pages'] = vol_offset[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "executionInfo": {
     "elapsed": 367,
     "status": "ok",
     "timestamp": 1632171301241,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "dnPRHt2RpasF"
   },
   "outputs": [],
   "source": [
    "## Put Titles\n",
    "titles = ['In Search of Lost Time',\n",
    "          'Swann Way', \n",
    "          'In the Shadow of Young Girls in Flower',\n",
    "     'The Guermantes Way',\n",
    "    'Sodom and Gomorrah',\n",
    "    'The Prisoner',\n",
    "    'The Fugitive',\n",
    "    'Time Regained']\n",
    "df_meta['Title'] = titles[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171301637,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "I_YpMD4KqQ43",
    "outputId": "db15ab27-0477-465c-c884-fce39392d21e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Vol_Num</th>\n",
       "      <th>Start_dt</th>\n",
       "      <th>End_dt</th>\n",
       "      <th>Vol_pages</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>448</td>\n",
       "      <td>Swann Way</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-05-21</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>550</td>\n",
       "      <td>In the Shadow of Young Girls in Flower</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>640</td>\n",
       "      <td>The Guermantes Way</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-10-15</td>\n",
       "      <td>2020-10-13</td>\n",
       "      <td>627</td>\n",
       "      <td>Sodom and Gomorrah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>2021-04-16</td>\n",
       "      <td>466</td>\n",
       "      <td>The Prisoner</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>315</td>\n",
       "      <td>The Fugitive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>Time Regained</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Vol_Num    Start_dt  ... Vol_pages                                   Title\n",
       "0        1  2017-06-11  ...       448                               Swann Way\n",
       "1        2  2018-05-21  ...       550  In the Shadow of Young Girls in Flower\n",
       "2        3  2019-01-01  ...       640                      The Guermantes Way\n",
       "3        4  2019-10-15  ...       627                      Sodom and Gomorrah\n",
       "4        5  2020-10-14  ...       466                            The Prisoner\n",
       "5        6  2021-04-17  ...       315                            The Fugitive\n",
       "6        7  2021-06-18  ...       449                           Time Regained\n",
       "\n",
       "[7 rows x 5 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "executionInfo": {
     "elapsed": 356,
     "status": "ok",
     "timestamp": 1632171306315,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "syyx1fMe1ug8"
   },
   "outputs": [],
   "source": [
    "tot_page = [0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1632171307679,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "52r7Rx202MrZ",
    "outputId": "4f773a7a-e404-431a-df2d-62f2ebb45683"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 448, 998, 1638, 2265, 2731, 3046, 3495]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i   in df_meta.Vol_pages.values.astype(int).cumsum():\n",
    "  tot_page.append(i)\n",
    "tot_page"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "executionInfo": {
     "elapsed": 373,
     "status": "ok",
     "timestamp": 1632171310426,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "x9tCRsqE5wTD"
   },
   "outputs": [],
   "source": [
    "## Add the total pages\n",
    "df_meta['Tot_pages'] = tot_page[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269
    },
    "executionInfo": {
     "elapsed": 7,
     "status": "ok",
     "timestamp": 1632171310975,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "-WpPVSQC2qCU",
    "outputId": "afcaef5a-7911-497a-989c-fd7e1d80400f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Vol_Num</th>\n",
       "      <th>Start_dt</th>\n",
       "      <th>End_dt</th>\n",
       "      <th>Vol_pages</th>\n",
       "      <th>Title</th>\n",
       "      <th>Tot_pages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>448</td>\n",
       "      <td>Swann Way</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-05-21</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>550</td>\n",
       "      <td>In the Shadow of Young Girls in Flower</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>640</td>\n",
       "      <td>The Guermantes Way</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-10-15</td>\n",
       "      <td>2020-10-13</td>\n",
       "      <td>627</td>\n",
       "      <td>Sodom and Gomorrah</td>\n",
       "      <td>1638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>2021-04-16</td>\n",
       "      <td>466</td>\n",
       "      <td>The Prisoner</td>\n",
       "      <td>2265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>315</td>\n",
       "      <td>The Fugitive</td>\n",
       "      <td>2731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>Time Regained</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Vol_Num    Start_dt  ...                                   Title  Tot_pages\n",
       "0        1  2017-06-11  ...                               Swann Way          0\n",
       "1        2  2018-05-21  ...  In the Shadow of Young Girls in Flower        448\n",
       "2        3  2019-01-01  ...                      The Guermantes Way        998\n",
       "3        4  2019-10-15  ...                      Sodom and Gomorrah       1638\n",
       "4        5  2020-10-14  ...                            The Prisoner       2265\n",
       "5        6  2021-04-17  ...                            The Fugitive       2731\n",
       "6        7  2021-06-18  ...                           Time Regained       3046\n",
       "\n",
       "[7 rows x 6 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "executionInfo": {
     "elapsed": 307,
     "status": "ok",
     "timestamp": 1632171322363,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "5lUaNgYFq8GA"
   },
   "outputs": [],
   "source": [
    "df_meta.to_csv(path+'proust_meta_final.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VDfcNQR9rIoW"
   },
   "source": [
    "# Make The Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "executionInfo": {
     "elapsed": 495,
     "status": "ok",
     "timestamp": 1632171340984,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "HsdNx93gs8MQ"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from matplotlib.dates import DateFormatter\n",
    "import matplotlib.dates as mdates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1632171342279,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "ckyNLVfQo10e"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(path+'proust_final.csv')\n",
    "df_meta = pd.read_csv(path+'proust_meta_final.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1632171343866,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "cH1bcC7Yo9vC"
   },
   "outputs": [],
   "source": [
    "df.index = pd.to_datetime(df[\"dt\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 455
    },
    "executionInfo": {
     "elapsed": 8,
     "status": "ok",
     "timestamp": 1632171345099,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "MfC6ud2Qo9Fl",
    "outputId": "3826a33a-8863-4a18-e470-1a682837bc38"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>page</th>\n",
       "      <th>tot</th>\n",
       "      <th>Vol_Num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dt</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-11</th>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-12</th>\n",
       "      <td>2017-06-12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-13</th>\n",
       "      <td>2017-06-13</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-14</th>\n",
       "      <td>2017-06-14</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-15</th>\n",
       "      <td>2017-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-16</th>\n",
       "      <td>2021-09-16</td>\n",
       "      <td>404</td>\n",
       "      <td>3450</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-17</th>\n",
       "      <td>2021-09-17</td>\n",
       "      <td>411</td>\n",
       "      <td>3457</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-18</th>\n",
       "      <td>2021-09-18</td>\n",
       "      <td>425</td>\n",
       "      <td>3471</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-19</th>\n",
       "      <td>2021-09-19</td>\n",
       "      <td>435</td>\n",
       "      <td>3481</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-20</th>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>449</td>\n",
       "      <td>3495</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1562 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    dt  page   tot  Vol_Num\n",
       "dt                                         \n",
       "2017-06-11  2017-06-11     2     2        1\n",
       "2017-06-12  2017-06-12     2     2        1\n",
       "2017-06-13  2017-06-13     2     2        1\n",
       "2017-06-14  2017-06-14     2     2        1\n",
       "2017-06-15  2017-06-15     2     2        1\n",
       "...                ...   ...   ...      ...\n",
       "2021-09-16  2021-09-16   404  3450        7\n",
       "2021-09-17  2021-09-17   411  3457        7\n",
       "2021-09-18  2021-09-18   425  3471        7\n",
       "2021-09-19  2021-09-19   435  3481        7\n",
       "2021-09-20  2021-09-20   449  3495        7\n",
       "\n",
       "[1562 rows x 4 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 300,
     "status": "ok",
     "timestamp": 1632171350291,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "7rWtqOq58jma",
    "outputId": "d6cbe02c-1573-422a-cc0f-f301be1ff801"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2017-06-11', '2017-06-12', '2017-06-13', ..., '2021-09-18',\n",
       "       '2021-09-19', '2021-09-20'], dtype=object)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dt.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 294
    },
    "executionInfo": {
     "elapsed": 378,
     "status": "ok",
     "timestamp": 1630440623712,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "90GNtgw3y4A8",
    "outputId": "ab67b4da-bf12-4f3d-c8c8-93286cb73b21"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fde93d201d0>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.tot.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "GwSKAGFas5oS"
   },
   "outputs": [],
   "source": [
    "#last_row = [7, '2021-06-18', '2021-09-21', 451, 'Time Regained']\n",
    "\n",
    "## create dfadd\n",
    "#df_extra = pd.DataFrame(np.array([last_row]), columns = df_meta.columns)\n",
    "\n",
    "#df_meta = pd.concat([df_meta, df_extra], axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269
    },
    "executionInfo": {
     "elapsed": 224,
     "status": "ok",
     "timestamp": 1630441034682,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "o-Q0kr2-s5r9",
    "outputId": "6f63437b-1baa-4d05-f263-e69d81b56cf6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Vol_Num</th>\n",
       "      <th>Start_dt</th>\n",
       "      <th>End_dt</th>\n",
       "      <th>Vol_pages</th>\n",
       "      <th>Title</th>\n",
       "      <th>Tot_pages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-11</td>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>448</td>\n",
       "      <td>Swann Way</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-05-21</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>550</td>\n",
       "      <td>In the Shadow of Young Girls in Flower</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>640</td>\n",
       "      <td>The Guermantes Way</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-10-15</td>\n",
       "      <td>2020-10-13</td>\n",
       "      <td>627</td>\n",
       "      <td>Sodom and Gomorrah</td>\n",
       "      <td>1638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>2021-04-16</td>\n",
       "      <td>466</td>\n",
       "      <td>The Prisoner</td>\n",
       "      <td>2265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2021-04-17</td>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>315</td>\n",
       "      <td>The Fugitive</td>\n",
       "      <td>2731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>2021-09-23</td>\n",
       "      <td>449</td>\n",
       "      <td>Time Regained</td>\n",
       "      <td>3046</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Vol_Num    Start_dt  ...                                   Title  Tot_pages\n",
       "0        1  2017-06-11  ...                               Swann Way          0\n",
       "1        2  2018-05-21  ...  In the Shadow of Young Girls in Flower        448\n",
       "2        3  2019-01-01  ...                      The Guermantes Way        998\n",
       "3        4  2019-10-15  ...                      Sodom and Gomorrah       1638\n",
       "4        5  2020-10-14  ...                            The Prisoner       2265\n",
       "5        6  2021-04-17  ...                            The Fugitive       2731\n",
       "6        7  2021-06-18  ...                           Time Regained       3046\n",
       "\n",
       "[7 rows x 6 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ymgKWjLU5m7j"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YKAwefUv5npn"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 36
    },
    "executionInfo": {
     "elapsed": 210,
     "status": "ok",
     "timestamp": 1630341010292,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "",
      "userId": "05340370060253426060"
     },
     "user_tz": -60
    },
    "id": "iQ2L5itqs5vo",
    "outputId": "c423bca7-9159-434a-f772-321656d309c3"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'2017-06-11'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meta['Start_dt'].values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iJbphg-Ns5zY"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "executionInfo": {
     "elapsed": 293,
     "status": "ok",
     "timestamp": 1632171359423,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "t8Mbkmf5swbj"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 952
    },
    "executionInfo": {
     "elapsed": 1801,
     "status": "ok",
     "timestamp": 1632171362500,
     "user": {
      "displayName": "Andrea Abeliano",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "05340370060253426060"
     },
     "user_tz": -120
    },
    "id": "znnbAi1PsxEQ",
    "outputId": "0d068281-7697-4736-a30f-d287414e7f05"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with plt.xkcd():\n",
    "    # Based on \"Stove Ownership\" from XKCD by Randall Monroe\n",
    "    # http://xkcd.com/418/\n",
    "\n",
    "    # Some other good examples: \n",
    "    # https://jakevdp.github.io/blog/2012/10/07/xkcd-style-plots-in-matplotlib/\n",
    "    # https://matplotlib.org/xkcd/gallery.html\n",
    "    fig = plt.figure(figsize=(20,15))\n",
    "    ax = fig.add_axes((0.5, 0.2, 0.8, 0.7))\n",
    "    ax.spines['right'].set_color('none')\n",
    "    ax.spines['top'].set_color('none')\n",
    "    #plt.xticks([])\n",
    "    #plt.yticks([])\n",
    "    #ax.set_ylim([-30, 10])\n",
    "\n",
    "    #data = np.ones(100)\n",
    "    #data[70:] -= np.arange(30)\n",
    "\n",
    "    #plt.annotate(\n",
    "    #    'THE DAY I REALIZED\\nI COULD COOK BACON\\nWHENEVER I WANTED',\n",
    "    #    xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10))\n",
    "\n",
    "    ax = df.tot.plot(linewidth=10)\n",
    "\n",
    "    ## plot volume lines and name\n",
    "    title_x_positions = ['2019-08-01','2018-12-01','2019-08-01',\n",
    "                         '2017-07-01','2017-07-01','2017-07-01','2017-07-01']\n",
    "    prefix_title = ['Vol I: ', 'Vol II: ','Vol III: ',\n",
    "                    'Vol IV: ','Vol V: ','Vol VI: ','Vol VII: ']\n",
    "    #x = df_meta['Start_dt'].values[0]\n",
    "    #\n",
    "    #plt.plot(['2017-07-01', '2021-07-01'], [500, 500], 'k-', lw=2)\n",
    "    #ax.annotate(\"test\", xy=('2017-07-01',600))\n",
    "    for i in range(7):\n",
    "      y = df_meta['Tot_pages'].values[i]\n",
    "      name = prefix_title[i]+df_meta.Title.values[i]\n",
    "      ax.axhline(y, color=\"red\", linestyle=\"--\", linewidth=2, alpha=0.3)\n",
    "      ax.annotate(name, xy=(title_x_positions[i],y+50), fontsize=30)\n",
    "   \n",
    "    y = 3495   \n",
    "    name = 'In Search of Lost Time - The END'\n",
    "    ax.axhline(y, color=\"red\", linestyle=\":\", linewidth=4, alpha=0.3)\n",
    "    ax.annotate(name, xy=(title_x_positions[i],y+50), fontsize=30)\n",
    "\n",
    "    ax.set_xlabel('time', labelpad=30, fontsize=40)\n",
    "    ax.set_ylabel('Total Pages', labelpad=30, fontsize=40)\n",
    "    \n",
    "    ax.tick_params(axis='both', labelsize=20) ## rotation, etc... \n",
    "    \n",
    "    # Define the date format\n",
    "    date_form = DateFormatter(\"%Y-%m\")\n",
    "    ax.xaxis.set_major_formatter(date_form)\n",
    "    # Ensure ticks fall once every other week (interval=2) \n",
    "    ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=13))\n",
    "\n",
    "    \n",
    "    fig.text(\n",
    "        0.6, 0.05,\n",
    "        '\"Stove Ownership\" from xkcd by Randall Monroe',\n",
    "        ha='center')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tpU-szIysxNS"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NgqA0za0sxQu"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iH9G5Y-ssxUA"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "I6Elw-DLsxXE"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "aUy3XPERsxaM"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IOqaA3h8sxdX"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3q857RqTsxgY"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wvQuRrFUsxjb"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6ssuOu_Asxmd"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-MwPDYG1sxph"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "ProustSummary.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
