{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "50b09ec4-bcd5-4967-8e3d-19b80a251a74",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e52b234-2b45-4073-a10c-cabecea0d425",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/abocci/Dropbox/ML/JupiterNotebooks/sandbox\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae086f73-bc61-4ce9-856c-6d68ddd003c3",
   "metadata": {},
   "source": [
    "# Bayesian approach\n",
    "\n",
    "* Calculate individual probability\n",
    "* make the sum"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "026a4b10-e452-4ddc-9f4a-d64344aaf803",
   "metadata": {},
   "source": [
    "## Individual probability\n",
    "\n",
    "Data:\n",
    "* m: total tries\n",
    "* q: success\n",
    "\n",
    "Prediction:\n",
    "* n: following tries\n",
    "* k: success"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "592e5773-cfb2-447c-974b-e26f0f02eaaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.special import factorial as f_\n",
    "from scipy.special import comb\n",
    "from scipy.stats import binom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0e219238-81b3-40f6-9583-9efe930f50ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ProbIntegralValue(a,b):\n",
    "    return f_(a)*f_(b)/f_(a+b+1)\n",
    "\n",
    "def BayesianProbability(q,m,n,k):\n",
    "    \n",
    "    a = q\n",
    "    b = m-a\n",
    "    den = ProbIntegralValue(a,b)\n",
    "    \n",
    "    a = k+q\n",
    "    b = n+m-a\n",
    "    num = comb(n,k)*ProbIntegralValue(a,b)\n",
    "    \n",
    "    return num/den\n",
    "\n",
    "def BayesianProbability2(q,m,n,k):\n",
    "    p0 = BayesianProbability(q,m,n,k)\n",
    "    \n",
    "    a1 = n-k + m-q\n",
    "    a2 = n-k -q  ## corr\n",
    "    \n",
    "    corr = a2/a1\n",
    "    \n",
    "    return p0*corr\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "aa3d3283-0922-43b3-ac09-65d50f5f4171",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.09090909090909091"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BayesianProbability(3,8,3,3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5703d95-3c46-45eb-bfa8-ec4cf317da1d",
   "metadata": {},
   "source": [
    "check if the probability add to 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "10071f10-d77b-4656-ae53-5b1bb2f81c9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0.49206349206349204 0.25396825396825395 -0.23809523809523808 ---> 0.49206349206349204 0.25396825396825395 -0.23809523809523808\n",
      "1 0.25396825396825395 0.12906583398386676 -0.1249024199843872 ---> 0.746031746031746 0.3830340879521207 -0.36299765807962536\n",
      "2 0.12906583398386676 0.06453291699193338 -0.06453291699193338 ---> 0.8750975800156128 0.44756700494405405 -0.4275305750715587\n",
      "3 0.06453291699193338 0.03171956936891641 -0.03281334762301697 ---> 0.9396304970075462 0.47928657431297045 -0.46034392269457575\n",
      "4 0.03171956936891641 0.015312895557407922 -0.016406673811508485 ---> 0.9713500663764626 0.4945994698703784 -0.4767505965060842\n",
      "5 0.01531289555740792 0.007253476842982698 -0.008059418714425223 ---> 0.9866629619338705 0.5018529467133611 -0.48481001522050937\n",
      "6 0.007253476842982701 0.003367685677099111 -0.00388579116588359 ---> 0.9939164387768532 0.5052206323904602 -0.488695806386393\n",
      "7 0.0033676856770991108 0.001530766216863232 -0.0018369194602358787 ---> 0.9972841244539523 0.5067513986073234 -0.4905327258466289\n",
      "8 0.001530766216863232 0.0006803405408281031 -0.000850425676035129 ---> 0.9988148906708155 0.5074317391481515 -0.491383151522664\n",
      "9 0.0006803405408281031 0.00029524212149144096 -0.00038509841933666213 ---> 0.9994952312116436 0.507726981269643 -0.49176824994200063\n",
      "10 0.00029524212149144096 0.00012491012832330193 -0.00017033199316813903 ---> 0.9997904733331351 0.5078518913979663 -0.4919385819351688\n",
      "11 0.00012491012832330193 5.143358225077138e-05 -7.347654607253055e-05 ---> 0.9999153834614584 0.5079033249802171 -0.4920120584812413\n",
      "12 5.1433582250771394e-05 2.0573432900308558e-05 -3.086014935046284e-05 ---> 0.9999668170437092 0.5079238984131174 -0.4920429186305918\n",
      "13 2.0573432900308558e-05 7.977453573589032e-06 -1.2595979326719526e-05 ---> 0.9999873904766095 0.507931875866691 -0.4920555146099185\n",
      "14 7.977453573589032e-06 2.991545090095887e-06 -4.985908483493145e-06 ---> 0.9999953679301831 0.5079348674117811 -0.492060500518402\n",
      "15 2.991545090095887e-06 1.0820482240772358e-06 -1.909496866018651e-06 ---> 0.9999983594752732 0.5079359494600052 -0.49206241001526796\n",
      "16 1.0820482240772358e-06 3.7636459967903854e-07 -7.056836243981974e-07 ---> 0.9999994415234973 0.5079363258246049 -0.4920631156988924\n",
      "17 3.763645996790385e-07 1.2545486655967948e-07 -2.50909733119359e-07 ---> 0.999999817888097 0.5079364512794715 -0.4920633666086255\n",
      "18 1.254548665596795e-07 3.9917457541716205e-08 -8.55374090179633e-08 ---> 0.9999999433429636 0.5079364911969291 -0.49206345214603453\n",
      "19 3.9917457541716205e-08 1.2068068559123503e-08 -2.78493889825927e-08 ---> 0.9999999832604212 0.5079365032649976 -0.49206347999542355\n",
      "20 1.2068068559123508e-08 3.4480195883210023e-09 -8.620048970802506e-09 ---> 0.9999999953284897 0.5079365067130172 -0.49206348861547256\n",
      "21 3.4480195883210023e-09 9.250784261349032e-10 -2.522941162186099e-09 ---> 0.9999999987765092 0.5079365076380956 -0.49206349113841363\n",
      "22 9.25078426134903e-10 2.3126960653372574e-10 -6.938088196011772e-10 ---> 0.9999999997015877 0.5079365078693652 -0.49206349183222253\n",
      "23 2.312696065337257e-10 5.336990920009055e-11 -1.7789969733363513e-10 ---> 0.9999999999328573 0.507936507922735 -0.4920634920101222\n",
      "24 5.3369909200090536e-11 1.1235770357913796e-11 -4.2134138842176736e-11 ---> 0.9999999999862271 0.5079365079339708 -0.4920634920522563\n",
      "25 1.1235770357913798e-11 2.1256862839296375e-12 -9.11008407398416e-12 ---> 0.9999999999974629 0.5079365079360965 -0.49206349206136646\n",
      "26 2.125686283929638e-12 3.542810473216063e-13 -1.7714052366080316e-12 ---> 0.9999999999995886 0.5079365079364507 -0.4920634920631378\n",
      "27 3.542810473216063e-13 5.06115781888009e-14 -3.0366946913280545e-13 ---> 0.9999999999999428 0.5079365079365014 -0.49206349206344147\n",
      "28 5.06115781888009e-14 5.954303316329518e-15 -4.4657274872471384e-14 ---> 0.9999999999999934 0.5079365079365074 -0.4920634920634861\n",
      "29 5.954303316329516e-15 5.413003014845015e-16 -5.4130030148450145e-15 ---> 0.9999999999999994 0.5079365079365079 -0.49206349206349154\n",
      "30 5.413003014845017e-16 3.3831268842781357e-17 -5.074690326417204e-16 ---> 1.0 0.5079365079365079 -0.4920634920634921\n",
      "31 3.3831268842781357e-17 1.091331252992947e-18 -3.273993758978841e-17 ---> 1.0 0.5079365079365079 -0.4920634920634921\n",
      "32 1.091331252992947e-18 0.0 -1.091331252992947e-18 ---> 1.0 0.5079365079365079 -0.4920634920634921\n"
     ]
    }
   ],
   "source": [
    "n=32\n",
    "m=30\n",
    "q=0\n",
    "\n",
    "tot_p = 0\n",
    "tot_p2 = 0 \n",
    "for k in range(n+1):\n",
    "    p = BayesianProbability(q,m,n,k)\n",
    "    p1 = BayesianProbability2(q,m,n,k)\n",
    "\n",
    "    tot_p += p\n",
    "    tot_p2 += p1\n",
    "\n",
    "    print(k, p, p1, p1-p, '--->', tot_p, tot_p2, tot_p2-tot_p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5f4f489-b0c9-42de-819e-d2ad047b3f88",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2578096-91ae-423f-a4d6-039ce71c9405",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8072dc47-2204-4375-9354-b80568ab46e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3f71b901-2a79-4544-9c8b-e2cfe6a43d81",
   "metadata": {},
   "source": [
    "# Frequesntistic approach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "03d12a1d-f934-4eb8-8028-9baef5b5f977",
   "metadata": {},
   "outputs": [],
   "source": [
    "def FreqProbability(q,m,n,k):\n",
    "    \n",
    "    p_hat = q/m\n",
    "    prob = binom.pmf(k,n,p_hat)\n",
    "    return prob\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1864f1b5-9705-4927-bf1b-7de47f761820",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.052734375"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FreqProbability(3,8,3,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e759119c-88d0-43aa-834b-a77485b5037e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.052734375"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(3/8)**3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f57549-9b8b-478b-842e-67917e4b18b9",
   "metadata": {},
   "source": [
    "## Integral probablity\n",
    "\n",
    "Data are the same\n",
    "\n",
    "n: still the same (number of follow tries)\n",
    "\n",
    "Sum probability to have **at least** k_min sucesss (i.e. $k\\ge k_{min}$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a9d85a6-ce13-407d-bad6-0a608c089c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ProbabilitySum(func, q,m,n,k):\n",
    "    prob_v = np.array([func(q,m,n,i) for i in range(k,n+1)])\n",
    "    #print(prob_v)\n",
    "    return prob_v.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ddf56291-7e3f-4222-98f7-645f8217fca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ProbabilitySum(FreqProbability,3,8,3,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3485358a-cee2-49e3-8e60-9bf56303c685",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ProbabilitySum(BayesianProbability,3,8,3,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "49df2cf2-85c8-4da6-a861-bb9e50d97366",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ProbabilitySumVector(func, q,m,n):\n",
    "    def funcsum(k): \n",
    "        return ProbabilitySum(func, q,m,n,k)\n",
    "    prob_v = np.array([funcsum(i) for i in range(0,n+1)])\n",
    "    return prob_v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c8768461-2a55-4558-a71a-ed77fadd37a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.        , 0.74545455, 0.36363636, 0.09090909])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ProbabilitySumVector(BayesianProbability,3,8,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "df7be1ed-8c14-4646-ba33-8cf37e8b7b8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.        , 0.75585938, 0.31640625, 0.05273438])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ProbabilitySumVector(FreqProbability,3,8,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bba01549-5898-4870-85be-3e34ceb95197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0, 1.00, 1.00, 1.0000\n",
      "1, 1.00, 1.00, 1.0000\n",
      "2, 1.00, 1.00, 1.0000\n",
      "3, 1.00, 1.00, 0.9997\n",
      "4, 1.00, 1.00, 0.9990\n",
      "5, 1.00, 1.00, 0.9972\n",
      "6, 1.01, 1.00, 0.9933\n",
      "7, 1.02, 1.00, 0.9862\n",
      "8, 1.03, 1.01, 0.9753\n",
      "9, 1.06, 1.02, 0.9612\n",
      "10, 1.10, 1.04, 0.9460\n",
      "11, 1.16, 1.09, 0.9334\n",
      "12, 1.25, 1.16, 0.9282\n",
      "13, 1.38, 1.29, 0.9357\n",
      "14, 1.55, 1.49, 0.9619\n",
      "15, 1.78, 1.81, 1.0135\n",
      "16, 2.11, 2.32, 1.0991\n",
      "17, 2.57, 3.16, 1.2310\n",
      "18, 3.22, 4.59, 1.4274\n",
      "19, 4.14, 7.11, 1.7165\n",
      "20, 5.50, 11.79, 2.1433\n",
      "21, 7.53, 20.94, 2.7813\n",
      "22, 10.62, 39.86, 3.7526\n",
      "23, 15.47, 81.46, 5.2662\n",
      "24, 23.26, 178.82, 7.6878\n",
      "25, 36.15, 422.02, 11.6754\n",
      "26, 58.09, 1071.61, 18.4462\n",
      "27, 96.65, 2930.24, 30.3169\n",
      "28, 166.64, 8637.10, 51.8293\n",
      "29, 298.11, 27473.96, 92.1598\n",
      "30, 554.10, 94434.66, 170.4301\n",
      "31, 1071.77, 351283.97, 327.7600\n",
      "32, 2161.37, 1416671.74, 655.4522\n",
      "33, 4553.84, 6206646.18, 1362.9465\n",
      "34, 10048.63, 29611556.37, 2946.8261\n",
      "35, 23287.99, 154274469.56, 6624.6369\n",
      "36, 56867.85, 880586267.46, 15484.7813\n",
      "37, 146878.62, 5527845985.36, 37635.4704\n",
      "38, 403033.05, 38335771289.15, 95118.1825\n",
      "39, 1181138.73, 295284412874.49, 249999.7724\n",
      "40, 3720265.72, 2542419691513.89, 683397.3386\n",
      "41, 12690219.04, 24660031285662.89, 1943231.3349\n",
      "42, 47320853.51, 272031061714392.78, 5748650.7857\n",
      "43, 195171360.07, 3453818235368012.00, 17696337.3834\n",
      "44, 903837427.75, 51246802752263520.00, 56699137.6756\n",
      "45, 4794185925.39, 906721386471962240.00, 189129374.7433\n",
      "46, 29936533478.82, 19668050407321403392.00, 656991579.2433\n",
      "47, 229059233147.76, 544591908164907827200.00, 2377515635.0655\n",
      "48, 2288978114410.75, 20523541552430936227840.00, 8966246301.4480\n",
      "49, 33580244780664.34, 1183814931245221640404992.00, 35253314529.9426\n",
      "50, 963494715629830.00, 139295556909854077476667392.00, 144573244305.5461\n"
     ]
    }
   ],
   "source": [
    "m=50\n",
    "q=15\n",
    "\n",
    "n=50\n",
    "aa = ProbabilitySumVector(BayesianProbability,q,m,n)\n",
    "bb = ProbabilitySumVector(FreqProbability,q,m,n)\n",
    "for i in range(len(aa)):\n",
    "    print(f'{i}, {1/aa[i]:.2f}, {1/bb[i]:.2f}, {aa[i]/bb[i]:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "13a5e4c1-ab72-4629-b47e-6bdcf88b5bfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0, 1.00, 1.00, 1.0000\n",
      "1, 1.00, 1.00, 1.0000\n",
      "2, 1.00, 1.00, 1.0000\n",
      "3, 1.00, 1.00, 0.9999\n",
      "4, 1.00, 1.00, 0.9997\n",
      "5, 1.00, 1.00, 0.9992\n",
      "6, 1.00, 1.00, 0.9979\n",
      "7, 1.00, 1.00, 0.9956\n",
      "8, 1.01, 1.00, 0.9914\n",
      "9, 1.02, 1.00, 0.9848\n",
      "10, 1.03, 1.00, 0.9750\n",
      "11, 1.04, 1.00, 0.9618\n",
      "12, 1.07, 1.01, 0.9454\n",
      "13, 1.10, 1.02, 0.9270\n",
      "14, 1.14, 1.04, 0.9087\n",
      "15, 1.19, 1.07, 0.8936\n",
      "16, 1.27, 1.12, 0.8852\n",
      "17, 1.36, 1.20, 0.8879\n",
      "18, 1.47, 1.33, 0.9062\n",
      "19, 1.62, 1.53, 0.9457\n",
      "20, 1.80, 1.82, 1.0133\n",
      "21, 2.03, 2.27, 1.1190\n",
      "22, 2.33, 2.97, 1.2770\n",
      "23, 2.71, 4.09, 1.5099\n",
      "24, 3.20, 5.93, 1.8527\n",
      "25, 3.84, 9.08, 2.3627\n",
      "26, 4.69, 14.70, 3.1346\n",
      "27, 5.82, 25.19, 4.3298\n",
      "28, 7.34, 45.75, 6.2302\n",
      "29, 9.43, 88.10, 9.3425\n",
      "30, 12.33, 180.08, 14.6046\n",
      "31, 16.43, 391.01, 23.8057\n",
      "32, 22.30, 902.54, 40.4683\n",
      "33, 30.89, 2216.33, 71.7556\n",
      "34, 43.66, 5795.19, 132.7272\n",
      "35, 63.05, 16149.59, 256.1429\n",
      "36, 93.08, 48012.80, 515.7976\n",
      "37, 140.65, 152456.00, 1083.9567\n",
      "38, 217.73, 517693.58, 2377.6538\n",
      "39, 345.77, 1882604.24, 5444.6161\n",
      "40, 564.08, 7343437.73, 13018.3861\n",
      "41, 946.81, 30780886.14, 32510.2530\n",
      "42, 1638.04, 138930142.17, 84815.1181\n",
      "43, 2926.93, 676799249.75, 231232.0120\n",
      "44, 5414.21, 3568027125.26, 659012.1499\n",
      "45, 10395.59, 20418598702.35, 1964160.4750\n",
      "46, 20782.21, 127285007303.49, 6124710.6157\n",
      "47, 43412.87, 867852344229.78, 19990670.0549\n",
      "48, 95159.96, 6502605034081.05, 68333414.7293\n",
      "49, 219968.38, 53841655763024.58, 244769984.4020\n",
      "50, 539417.76, 495917391318875.88, 919356811.5239\n",
      "51, 1413487.14, 5121686107984453.00, 3623440180.6229\n",
      "52, 3993347.11, 59889036146822096.00, 14997202730.5677\n",
      "53, 12300953.08, 802537205934519680.00, 65241871948.6651\n",
      "54, 41916667.11, 12516069515874951168.00, 298594100597.6650\n",
      "55, 161083073.86, 231833794724394008576.00, 1439218840095.9304\n",
      "56, 717028082.03, 5244404763360149635072.00, 7314085591343.0361\n",
      "57, 3845051350.23, 150879155025844843315200.00, 39239828361892.7109\n",
      "58, 26451667994.17, 5886843254439183659302912.00, 222550927818082.7500\n",
      "59, 262156004766.05, 350340151034847554202238976.00, 1336380417253801.0000\n",
      "60, 4980964090555.01, 42391158275216344257908441088.00, 8510633183563639.0000\n"
     ]
    }
   ],
   "source": [
    "m=30\n",
    "q=10\n",
    "\n",
    "n=60\n",
    "aa = ProbabilitySumVector(BayesianProbability,q,m,n)\n",
    "bb = ProbabilitySumVector(FreqProbability,q,m,n)\n",
    "for i in range(len(aa)):\n",
    "    print(f'{i}, {1/aa[i]:.2f}, {1/bb[i]:.2f}, {aa[i]/bb[i]:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "35a5bb3a-da78-4dbd-875c-d0d8473cab0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0, 1.00, 1.00, 1.0000\n",
      "1, 1.00, 1.00, 0.9999\n",
      "2, 1.00, 1.00, 0.9993\n",
      "3, 1.00, 1.00, 0.9975\n",
      "4, 1.01, 1.00, 0.9933\n",
      "5, 1.02, 1.00, 0.9855\n",
      "6, 1.03, 1.00, 0.9732\n",
      "7, 1.05, 1.01, 0.9568\n",
      "8, 1.09, 1.02, 0.9381\n",
      "9, 1.14, 1.05, 0.9208\n",
      "10, 1.20, 1.09, 0.9101\n",
      "11, 1.29, 1.17, 0.9117\n",
      "12, 1.40, 1.30, 0.9322\n",
      "13, 1.54, 1.51, 0.9789\n",
      "14, 1.72, 1.83, 1.0615\n",
      "15, 1.95, 2.33, 1.1935\n",
      "16, 2.25, 3.14, 1.3956\n",
      "17, 2.63, 4.47, 1.7009\n",
      "18, 3.12, 6.75, 2.1635\n",
      "19, 3.76, 10.81, 2.8744\n",
      "20, 4.60, 18.34, 3.9905\n",
      "21, 5.70, 32.99, 5.7895\n",
      "22, 7.17, 62.94, 8.7767\n",
      "23, 9.16, 127.27, 13.8996\n",
      "24, 11.86, 272.65, 22.9878\n",
      "25, 15.59, 618.59, 39.6871\n",
      "26, 20.78, 1485.71, 71.4941\n",
      "27, 28.11, 3776.01, 134.3285\n",
      "28, 38.58, 10151.67, 263.1177\n",
      "29, 53.74, 28860.47, 537.0653\n",
      "30, 75.96, 86737.81, 1141.8682\n",
      "31, 109.00, 275519.71, 2527.7957\n",
      "32, 158.79, 924829.21, 5824.2425\n",
      "33, 234.93, 3280099.32, 13962.1758\n",
      "34, 353.08, 12291611.15, 34812.7476\n",
      "35, 539.23, 48667136.20, 90252.9612\n",
      "36, 837.16, 203613654.30, 243220.5053\n",
      "37, 1321.75, 900310879.36, 681150.8952\n",
      "38, 2123.27, 4208193319.23, 1981942.1692\n",
      "39, 3472.16, 20799542355.93, 5990380.1649\n",
      "40, 5783.41, 108752709855.18, 18804245.4282\n",
      "41, 9818.31, 601818994785.79, 61295548.0504\n",
      "42, 17000.63, 3526816124338.59, 207452064.5637\n",
      "43, 30047.48, 21902092075506.60, 728916154.5381\n",
      "44, 54255.15, 144249834556119.44, 2658730801.4750\n",
      "45, 100179.38, 1008470609529045.50, 10066648684.1375\n",
      "46, 189355.77, 7491612515863756.00, 39563688023.8035\n",
      "47, 366816.75, 59204873811013576.00, 161401771664.9302\n",
      "48, 729211.11, 498404554000261376.00, 683484584906.9258\n",
      "49, 1489761.97, 4476051888411955712.00, 3004541642465.5044\n",
      "50, 3132837.11, 42956202959771787264.00, 13711597982787.7520\n",
      "51, 6793544.73, 441364308590886584320.00, 64968190585300.6016\n",
      "52, 15221892.85, 4865628745081280266240.00, 319646760931654.0625\n",
      "53, 35321715.51, 57690482461665818312704.00, 1633286538652312.0000\n",
      "54, 85100898.57, 737715436539927972544512.00, 8668715006678185.0000\n",
      "55, 213510647.76, 10206033528300543087214592.00, 47801051776383096.0000\n",
      "56, 559703675.35, 153310409576189932108513280.00, 273913530189737504.0000\n",
      "57, 1538991318.98, 2510933415789354510391967744.00, 1631544885807509504.0000\n",
      "58, 4458791752.39, 45054824117026016829596762112.00, 10104715945282095104.0000\n",
      "59, 13683918131.88, 890725095140554198507975606272.00, 65092840117599412224.0000\n",
      "60, 44767522947.23, 19532105867948426070837138817024.00, 436300795355008335872.0000\n",
      "61, 157321295487.30, 478900812471584578549685875113984.00, 3044094005126149701632.0000\n",
      "62, 599437296780.80, 13258231627484631397471839993200640.00, 22117795637152259768320.0000\n",
      "63, 2505575758976.87, 419522455382803187878095550997856256.00, 167435550044637733322752.0000\n",
      "64, 11662273888554.52, 15409485318625178175749614146729017344.00, 1321310532223755595284480.0000\n",
      "65, 61655737124426.24, 670558471048422593941024371217985961984.00, 10875848742107836806332416.0000\n",
      "66, 380488735516430.62, 35549678373933203389004624739769503449088.00, 93431618483218045720330240.0000\n",
      "67, 2852498540318694.50, 2391207663238171875654043203450686907875328.00, 838285324055245624358993920.0000\n",
      "68, 27684652222285696.00, 217628772964285529814187042344995800683118592.00, 7860989952732652466071404544.0000\n",
      "69, 390927717641023872.00, 30143521254601169449579685060079666952287551488.00, 77107659279051109923607805952.0000\n",
      "70, 10697203909995288576.00, 8470329472542970255118807798761766777299692158976.00, 791826494456970746996063207424.0000\n"
     ]
    }
   ],
   "source": [
    "m=35\n",
    "q=7\n",
    "\n",
    "n=70\n",
    "aa = ProbabilitySumVector(BayesianProbability,q,m,n)\n",
    "bb = ProbabilitySumVector(FreqProbability,q,m,n)\n",
    "for i in range(len(aa)):\n",
    "    print(f'{i}, {1/aa[i]:.2f}, {1/bb[i]:.2f}, {aa[i]/bb[i]:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "676236f7-d84e-4491-9961-0540e1bde846",
   "metadata": {},
   "source": [
    "# The Professional "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a7bfce80-8191-4e27-b9a7-dc8aec3aaaf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "m=35\n",
    "q=7\n",
    "\n",
    "n=70\n",
    "k=22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6ee965f9-2428-4ad2-81be-ae1af39a3a23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10921175190335641"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "from scipy.stats import betabinom\n",
    "betabinom.sf(k,n,q+1,m-q+1)\n",
    "#def BBProbability(q,m,n,k):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91722a82-f839-4b78-a6e7-1c5ea7b1452d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:ds-advanced]",
   "language": "python",
   "name": "conda-env-ds-advanced-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
